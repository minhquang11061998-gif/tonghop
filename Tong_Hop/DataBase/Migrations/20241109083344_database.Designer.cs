// <auto-generated />
using System;
using DataBase.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataBase.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241109083344_database")]
    partial class database
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DataBase.Models.Classes", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid>("GradeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MaxStudent")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GradeId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("DataBase.Models.ExamHistorys", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ExamRoomStudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Exam_Room_StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Score")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("Exam_Room_StudentId");

                    b.ToTable("ExamHistorys");
                });

            modelBuilder.Entity("DataBase.Models.Exam_Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ExamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("TeacherId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TeacherId2")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ExamId");

                    b.HasIndex("RoomId");

                    b.HasIndex("TeacherId1");

                    b.HasIndex("TeacherId2");

                    b.ToTable("Exam_Rooms");
                });

            modelBuilder.Entity("DataBase.Models.Exam_Room_Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ChenkTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ExamRoomTestCodeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Exam_Room_TestCodeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Exam_Room_TestCodeId");

                    b.HasIndex("StudentId");

                    b.ToTable("Exam_Room_Students");
                });

            modelBuilder.Entity("DataBase.Models.Exam_Room_Student_AnswerHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ExamRoomStudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Exam_Room_StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TestQuestionAnswerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Exam_Room_StudentId");

                    b.HasIndex("TestQuestionAnswerId");

                    b.ToTable("Exam_Room_Student_AnswerHistories");
                });

            modelBuilder.Entity("DataBase.Models.Exam_Room_TestCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ExamRoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Exam_RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TestsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Exam_RoomId");

                    b.HasIndex("TestsId");

                    b.ToTable("Exam_Room_TestCodes");
                });

            modelBuilder.Entity("DataBase.Models.Exams", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.ToTable("Exams");
                });

            modelBuilder.Entity("DataBase.Models.Grades", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Name")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("DataBase.Models.Learning_Summary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Attendance")
                        .HasColumnType("float");

                    b.Property<bool>("IsView")
                        .HasColumnType("bit");

                    b.Property<Guid?>("PointTypesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Point_15")
                        .HasColumnType("float");

                    b.Property<double>("Point_45")
                        .HasColumnType("float");

                    b.Property<double>("Point_Final")
                        .HasColumnType("float");

                    b.Property<double>("Point_Midterm")
                        .HasColumnType("float");

                    b.Property<double>("Point_Summary")
                        .HasColumnType("float");

                    b.Property<Guid>("SemesterID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PointTypesId");

                    b.HasIndex("SemesterID");

                    b.HasIndex("StudentId");

                    b.HasIndex("SubjectId");

                    b.ToTable("Learning_Summaries");
                });

            modelBuilder.Entity("DataBase.Models.Notification_Class", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("NotificationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("NotificationId");

                    b.ToTable("Notification_Classes");
                });

            modelBuilder.Entity("DataBase.Models.Notifications", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("DataBase.Models.PointType_Subject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PointTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PointTypeId");

                    b.HasIndex("SubjectId");

                    b.ToTable("PointType_Subjects");
                });

            modelBuilder.Entity("DataBase.Models.PointTypes", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PointTypes");
                });

            modelBuilder.Entity("DataBase.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("DataBase.Models.Rooms", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("DataBase.Models.Scores", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PointTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PointTypesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Score")
                        .HasColumnType("float");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StudentsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SubjectsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PointTypesId");

                    b.HasIndex("StudentsId");

                    b.HasIndex("SubjectsId");

                    b.ToTable("Scores");
                });

            modelBuilder.Entity("DataBase.Models.Semesters", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Semesters");
                });

            modelBuilder.Entity("DataBase.Models.Student_Class", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("JoinTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("StudentId");

                    b.ToTable("Student_Classes");
                });

            modelBuilder.Entity("DataBase.Models.Students", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("DataBase.Models.Subject_Grade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GradeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GradeId");

                    b.HasIndex("SubjectId");

                    b.ToTable("Subject_Grades");
                });

            modelBuilder.Entity("DataBase.Models.Subjects", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("DataBase.Models.SystemConfigs", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("IsViewed")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("address")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SystemConfigs");
                });

            modelBuilder.Entity("DataBase.Models.Teacher_Subject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Teacher_Subjects");
                });

            modelBuilder.Entity("DataBase.Models.Teachers", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("DataBase.Models.TestCode_TestQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TestCodeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TestCodesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TestQuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TestCodesId");

                    b.HasIndex("TestQuestionId");

                    b.ToTable("TestCode_TestQuestion");
                });

            modelBuilder.Entity("DataBase.Models.TestCodes", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("TestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TestsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TestsId");

                    b.ToTable("TestCodes");
                });

            modelBuilder.Entity("DataBase.Models.TestQuestionAnswers", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TestQuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TestQuestionId");

                    b.ToTable("TestQuestionAnswers");
                });

            modelBuilder.Entity("DataBase.Models.TestQuestions", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("QuestionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RightAnswer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TestsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TestsId");

                    b.ToTable("TestQuestions");
                });

            modelBuilder.Entity("DataBase.Models.Tests", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("MaxStudent")
                        .HasColumnType("int");

                    b.Property<int?>("Minute")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PointTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PointTypeId");

                    b.HasIndex("SubjectId");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("DataBase.Models.Users", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Avartar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("FullName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastMordificationTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LockedEndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DataBase.Models.Classes", b =>
                {
                    b.HasOne("DataBase.Models.Grades", "Grade")
                        .WithMany("Class")
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataBase.Models.Teachers", "Teacher")
                        .WithMany("Class")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Grade");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("DataBase.Models.ExamHistorys", b =>
                {
                    b.HasOne("DataBase.Models.Exam_Room_Student", "Exam_Room_Student")
                        .WithMany("ExamHistory")
                        .HasForeignKey("Exam_Room_StudentId");

                    b.Navigation("Exam_Room_Student");
                });

            modelBuilder.Entity("DataBase.Models.Exam_Room", b =>
                {
                    b.HasOne("DataBase.Models.Exams", "Exam")
                        .WithMany("Exam_Room")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataBase.Models.Rooms", "Room")
                        .WithMany("Exam_Room")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataBase.Models.Teachers", "Teacher1")
                        .WithMany("Exam_RoomsAsTeacher1")
                        .HasForeignKey("TeacherId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataBase.Models.Teachers", "Teacher2")
                        .WithMany("Exam_RoomsAsTeacher2")
                        .HasForeignKey("TeacherId2")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("Room");

                    b.Navigation("Teacher1");

                    b.Navigation("Teacher2");
                });

            modelBuilder.Entity("DataBase.Models.Exam_Room_Student", b =>
                {
                    b.HasOne("DataBase.Models.Exam_Room_TestCode", "Exam_Room_TestCode")
                        .WithMany("Exam_Room_Students")
                        .HasForeignKey("Exam_Room_TestCodeId");

                    b.HasOne("DataBase.Models.Students", "Student")
                        .WithMany("Exam_Room_Student")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam_Room_TestCode");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("DataBase.Models.Exam_Room_Student_AnswerHistory", b =>
                {
                    b.HasOne("DataBase.Models.Exam_Room_Student", "Exam_Room_Student")
                        .WithMany("Exam_Room_Student_AnswerHistory")
                        .HasForeignKey("Exam_Room_StudentId");

                    b.HasOne("DataBase.Models.TestQuestionAnswers", "TestQuestionAnswer")
                        .WithMany("Exam_Room_Student_AnswerHistories")
                        .HasForeignKey("TestQuestionAnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam_Room_Student");

                    b.Navigation("TestQuestionAnswer");
                });

            modelBuilder.Entity("DataBase.Models.Exam_Room_TestCode", b =>
                {
                    b.HasOne("DataBase.Models.Exam_Room", "Exam_Room")
                        .WithMany("Exam_Room_TestCode")
                        .HasForeignKey("Exam_RoomId");

                    b.HasOne("DataBase.Models.Tests", "Tests")
                        .WithMany()
                        .HasForeignKey("TestsId");

                    b.Navigation("Exam_Room");

                    b.Navigation("Tests");
                });

            modelBuilder.Entity("DataBase.Models.Exams", b =>
                {
                    b.HasOne("DataBase.Models.Subjects", "Subject")
                        .WithMany("Exam")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("DataBase.Models.Learning_Summary", b =>
                {
                    b.HasOne("DataBase.Models.PointTypes", null)
                        .WithMany("Learning_Summaries")
                        .HasForeignKey("PointTypesId");

                    b.HasOne("DataBase.Models.Semesters", "Semester")
                        .WithMany("Learning_Summarys")
                        .HasForeignKey("SemesterID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataBase.Models.Students", "Student")
                        .WithMany("Learning_Summaries")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataBase.Models.Subjects", "Subject")
                        .WithMany("Learning_Summaries")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Semester");

                    b.Navigation("Student");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("DataBase.Models.Notification_Class", b =>
                {
                    b.HasOne("DataBase.Models.Classes", "Class")
                        .WithMany("Notification_Classe")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataBase.Models.Notifications", "Notification")
                        .WithMany("Notification_Classe")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Notification");
                });

            modelBuilder.Entity("DataBase.Models.PointType_Subject", b =>
                {
                    b.HasOne("DataBase.Models.PointTypes", "PointType")
                        .WithMany("PointType_Subjects")
                        .HasForeignKey("PointTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataBase.Models.Subjects", "Subject")
                        .WithMany("PointType_Subjects")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PointType");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("DataBase.Models.Scores", b =>
                {
                    b.HasOne("DataBase.Models.PointTypes", "PointTypes")
                        .WithMany("Scores")
                        .HasForeignKey("PointTypesId");

                    b.HasOne("DataBase.Models.Students", "Students")
                        .WithMany("Scores")
                        .HasForeignKey("StudentsId");

                    b.HasOne("DataBase.Models.Subjects", "Subjects")
                        .WithMany("Scores")
                        .HasForeignKey("SubjectsId");

                    b.Navigation("PointTypes");

                    b.Navigation("Students");

                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("DataBase.Models.Student_Class", b =>
                {
                    b.HasOne("DataBase.Models.Classes", "Class")
                        .WithMany("Student_Classes")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataBase.Models.Students", "Student")
                        .WithMany("Student_Class")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("DataBase.Models.Students", b =>
                {
                    b.HasOne("DataBase.Models.Users", "User")
                        .WithMany("Student")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataBase.Models.Subject_Grade", b =>
                {
                    b.HasOne("DataBase.Models.Grades", "Grade")
                        .WithMany("Subject_Grades")
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataBase.Models.Subjects", "Subject")
                        .WithMany("Subject_Grade")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Grade");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("DataBase.Models.Teacher_Subject", b =>
                {
                    b.HasOne("DataBase.Models.Subjects", "Subject")
                        .WithMany("Teacher_Subject")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataBase.Models.Teachers", "Teacher")
                        .WithMany("Teacher_Subject")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("DataBase.Models.Teachers", b =>
                {
                    b.HasOne("DataBase.Models.Users", "User")
                        .WithMany("Teacher")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataBase.Models.TestCode_TestQuestion", b =>
                {
                    b.HasOne("DataBase.Models.TestCodes", "TestCodes")
                        .WithMany("TestCode_TestQuestions")
                        .HasForeignKey("TestCodesId");

                    b.HasOne("DataBase.Models.TestQuestions", "TestQuestion")
                        .WithMany("TestCode_TestQuestions")
                        .HasForeignKey("TestQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestCodes");

                    b.Navigation("TestQuestion");
                });

            modelBuilder.Entity("DataBase.Models.TestCodes", b =>
                {
                    b.HasOne("DataBase.Models.Tests", "Tests")
                        .WithMany("testCodes")
                        .HasForeignKey("TestsId");

                    b.Navigation("Tests");
                });

            modelBuilder.Entity("DataBase.Models.TestQuestionAnswers", b =>
                {
                    b.HasOne("DataBase.Models.TestQuestions", "TestQuestion")
                        .WithMany("TestQuestionAnswer")
                        .HasForeignKey("TestQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestQuestion");
                });

            modelBuilder.Entity("DataBase.Models.TestQuestions", b =>
                {
                    b.HasOne("DataBase.Models.Tests", "Tests")
                        .WithMany("testQuestions")
                        .HasForeignKey("TestsId");

                    b.Navigation("Tests");
                });

            modelBuilder.Entity("DataBase.Models.Tests", b =>
                {
                    b.HasOne("DataBase.Models.PointTypes", "PointType")
                        .WithMany("tests")
                        .HasForeignKey("PointTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataBase.Models.Subjects", "Subject")
                        .WithMany("Test")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PointType");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("DataBase.Models.Users", b =>
                {
                    b.HasOne("DataBase.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DataBase.Models.Classes", b =>
                {
                    b.Navigation("Notification_Classe");

                    b.Navigation("Student_Classes");
                });

            modelBuilder.Entity("DataBase.Models.Exam_Room", b =>
                {
                    b.Navigation("Exam_Room_TestCode");
                });

            modelBuilder.Entity("DataBase.Models.Exam_Room_Student", b =>
                {
                    b.Navigation("ExamHistory");

                    b.Navigation("Exam_Room_Student_AnswerHistory");
                });

            modelBuilder.Entity("DataBase.Models.Exam_Room_TestCode", b =>
                {
                    b.Navigation("Exam_Room_Students");
                });

            modelBuilder.Entity("DataBase.Models.Exams", b =>
                {
                    b.Navigation("Exam_Room");
                });

            modelBuilder.Entity("DataBase.Models.Grades", b =>
                {
                    b.Navigation("Class");

                    b.Navigation("Subject_Grades");
                });

            modelBuilder.Entity("DataBase.Models.Notifications", b =>
                {
                    b.Navigation("Notification_Classe");
                });

            modelBuilder.Entity("DataBase.Models.PointTypes", b =>
                {
                    b.Navigation("Learning_Summaries");

                    b.Navigation("PointType_Subjects");

                    b.Navigation("Scores");

                    b.Navigation("tests");
                });

            modelBuilder.Entity("DataBase.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("DataBase.Models.Rooms", b =>
                {
                    b.Navigation("Exam_Room");
                });

            modelBuilder.Entity("DataBase.Models.Semesters", b =>
                {
                    b.Navigation("Learning_Summarys");
                });

            modelBuilder.Entity("DataBase.Models.Students", b =>
                {
                    b.Navigation("Exam_Room_Student");

                    b.Navigation("Learning_Summaries");

                    b.Navigation("Scores");

                    b.Navigation("Student_Class");
                });

            modelBuilder.Entity("DataBase.Models.Subjects", b =>
                {
                    b.Navigation("Exam");

                    b.Navigation("Learning_Summaries");

                    b.Navigation("PointType_Subjects");

                    b.Navigation("Scores");

                    b.Navigation("Subject_Grade");

                    b.Navigation("Teacher_Subject");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("DataBase.Models.Teachers", b =>
                {
                    b.Navigation("Class");

                    b.Navigation("Exam_RoomsAsTeacher1");

                    b.Navigation("Exam_RoomsAsTeacher2");

                    b.Navigation("Teacher_Subject");
                });

            modelBuilder.Entity("DataBase.Models.TestCodes", b =>
                {
                    b.Navigation("TestCode_TestQuestions");
                });

            modelBuilder.Entity("DataBase.Models.TestQuestionAnswers", b =>
                {
                    b.Navigation("Exam_Room_Student_AnswerHistories");
                });

            modelBuilder.Entity("DataBase.Models.TestQuestions", b =>
                {
                    b.Navigation("TestCode_TestQuestions");

                    b.Navigation("TestQuestionAnswer");
                });

            modelBuilder.Entity("DataBase.Models.Tests", b =>
                {
                    b.Navigation("testCodes");

                    b.Navigation("testQuestions");
                });

            modelBuilder.Entity("DataBase.Models.Users", b =>
                {
                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });
#pragma warning restore 612, 618
        }
    }
}
