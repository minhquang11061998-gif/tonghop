@page "/Admin_subject"
@using DataBase.DTOs
@using DataBase.Models
@using global::Data.DTOs
@layout AdminLayout
@inject IJSRuntime jsruntime
@inject HttpClient client
<div class="container-fluid mt-3">
    <div class="border rounded shadow p-3">

        <div class="row mb-3">
            <div class="col-5">
                <h5 class="text-start text-primary">Tìm kiếm danh sách môn học</h5>
            </div>
        </div>

        <!-- Form tìm kiếm -->
        <div class="row justify-content-center align-items-center">
            <!-- Dropdown Khối -->
            <div class="col-5 col-md-3 mx-1">
                <div class="form-group">
                    <select class="form-select" @onchange="@(e => GetAllClass(Guid.Parse(e.Value.ToString())))">
                        <option value="0" style="display:none">Chọn khối...</option>
                        @foreach (var itemGrade in grades.OrderBy(a => a.Name))
                        {
                            <option value="@itemGrade.Id">Khối @itemGrade.Name</option>
                        }
                    </select>
                </div>
            </div>

            <!-- Dropdown Lớp -->
            <div class="col-5 col-md-3 mx-1">
                <div class="form-group">
                    <select class="form-select" @onchange="OnClassChanged">
                        <option value="0" style="display:none">Chọn lớp...</option>
                        @foreach (var itemClass in classes.OrderBy(a => a.Name))
                        {
                            <option value="@itemClass.Id"
                            selected="@(itemClass.Id == selectidclass ? "selected" : null)">
                                Lớp @itemClass.Name
                            </option>
                        }
                    </select>
                </div>
            </div>

            <!-- Nút Tìm kiếm -->
            <div class="col-2 d-flex justify-content-center p-1">
                <button class="btn btn-primary" @onclick="() => getallsubject(selectidclass)">Tìm kiếm</button>
            </div>
        </div>

    </div>
</div>
<div class="row">
    <!-- Bên trái: Danh sách môn học -->
    <div class="col-9">
        <div class="container-fluid mt-3  min-vh-100">
            <table class="table table-bordered table-hover">
                <thead >
                    <tr>
                        <th colspan="8" class="bg-primary-subtle bg-opacity-75" style="height:15px">
                            <div class="d-flex justify-content-between align-items-center">
                                <!-- Phần tìm kiếm -->
                                <div style="width: 250px;">
                                    <div class="input-group">
                                        <input type="text" placeholder="Tìm kiếm..." class="form-control border" @bind="SearchText" />
                                        <span class="input-group-text bg-light border">
                                            <i class="bi bi-search text-muted"></i>
                                        </span>
                                    </div>
                                </div>
                            </div>
                        </th>
                    </tr>
                </thead>

                <thead>
                    <tr>
                        <th style="width: 10%;">STT</th>
                        <th style="width: 25%;">Tên môn</th>
                        <th style="width: 10%;">Mã code</th>
                        <th style="width: 15%;">Trạng thái</th>
                    </tr>
                </thead>
                <tbody>
                    <!-- Hàng danh sách dữ liệu -->
                    @if (FilteredUserstudent != null && FilteredUserstudent.Any())
                    {
                        @foreach (var item in FilteredUserstudent.OrderBy(c => c.Name))
                        {
                            <tr class="align-content-center" @onclick="()=>GetTeacher(item.Id)">
                                <td>@(FilteredUserstudent.IndexOf(item)+1)</td>
                                <td>@item.Name</td>
                                <td>@item.Code</td>
                                <td>@item.Status</td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="8" class="text-center text-danger">Không có dữ liệu.</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>

    <!-- Bên phải: Danh sách giáo viên -->
    <div class="col-3">
        <div class="container-fluid mt-3 border bg-light rounded min-vh-100">
            <div class="d-flex justify-content-between align-items-center mb-3 p-3">
                <h5 class="text-success fw-bold">Danh sách giáo viên</h5>
            </div>
            <table class="table table-borderless rounded">
                <tbody>
                    @if(editsubject){
                        <tr>
                            <select class="form-select">
                                <option value="@teacher_Subject.TeacherId" hidden>@GetTeacherNameById(teacher_Subject.TeacherId)</option>
                                @foreach(var teacher in teacherDTOs){
                                    <option value="@teacher.Id" hidden>@teacher.Name</option>
                                }
                            </select>
                        </tr>
                    }else{
                        @if (users != null && users.Any())
                        {
                            <!-- Danh sách giáo viên -->
                            @foreach (var teacher in users.OrderBy(t => t.FullName))
                            {
                                <tr>
                                    <td>@teacher.FullName</td>
                                    <td class="text-end">
                                        <button class="btn btn-danger btn-sm" @onclick="showedit">Chỉnh sửa</button>
                                    </td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="2" class="text-center text-danger">Không có dữ liệu.</td>
                            </tr>
                        }
                    }

                </tbody>
            </table>
        </div>
    </div>
</div>

@code {
    private bool showfaceid = false;
    private Guid idstudent;
    private void showdata(Guid id)
    {
        idstudent = id;
        showfaceid = true;
    }
    private void closefaceid()
    {
        showfaceid = false;
    }
    private string GetTeacherNameById(Guid teacherId)
    {
        if (teacher_Subject.TeacherId == teacherId)
        {
            return teacher_Subject.Teacher?.User?.FullName ?? "Tên không tồn tại";
        }
        return "Tên không tồn tại";
    }
    private void showedit(){
        editsubject = true;
    }

    private async Task delete(string id)
    {
        var resrpon = await client.DeleteAsync($"https://localhost:7046/api/FaceId/remove-face?userId={id}");
        if (resrpon.IsSuccessStatusCode)
        {
            await jsruntime.InvokeVoidAsync("alert", "xóa dữ liệu thành công");
        }
        else { await jsruntime.InvokeVoidAsync("alert", "xóa dữ liệu thất bại"); }

    }
    private async Task RegisterFaceAsync(string userId)
    {
        if (string.IsNullOrWhiteSpace(userId))
        {
            await jsruntime.InvokeVoidAsync("alert", "vui lòng nhập ID user");
            return;
        }

        try
        {
            var response = await client.PostAsync($"https://localhost:7046/api/FaceId/register-face?userId={userId}", null);
            if (response.IsSuccessStatusCode)
            {

                await jsruntime.InvokeVoidAsync("alert", "thêm dữ liệu  thành công");
                await jsruntime.InvokeVoidAsync("reloadCameraFeed");
                showfaceid = false;


            }
            else
            {
                var errorResponse = await response.Content.ReadAsStringAsync();
                await jsruntime.InvokeVoidAsync("alert", "thêm dữ liệu không thành công");
                await jsruntime.InvokeVoidAsync("reloadCameraFeed");
            }
        }
        catch (Exception)
        {
            await jsruntime.InvokeVoidAsync("alert", "thêm dữ liệu không thành công");
            await jsruntime.InvokeVoidAsync("reloadCameraFeed");
        }
    }
}
<script>
    function reloadCameraFeed() {
        const cameraImage = document.querySelector("#cameraStream");
        if (cameraImage) {
            cameraImage.src = "https://localhost:7046/api/FaceId/camera-stream?" + new Date().getTime();
        }
    }
</script>
@code {
    private bool editsubject= false;
    private Guid newGradeName = Guid.Empty;
    private Grades gradescreate = new Grades();
    private Guid selectidgrade;
    private Guid selectidclass;
    private Guid? TaskIdToEdit = null;
    private Guid? EditClass = null;
    private Teacher_Subject teacher_Subject = new Teacher_Subject();
    private void OnInputChanged(string? value)
    {
        if (int.TryParse(value, out var parsedValue))
        {
            gradescreate.Name = parsedValue;
          
            StateHasChanged();
        }
    }
    private void OnInputChangeds(ChangeEventArgs e)
    {

        var inputValue = e.Value?.ToString();
       
        StateHasChanged();
    }
    private void OnClassChanged(ChangeEventArgs e)
    {
        if (Guid.TryParse(e.Value?.ToString(), out var parsedId))
        {
            selectidclass = parsedId;

        }
    }
    private List<TeacherDTO> teacherDTOs = new List<TeacherDTO>();
    private List<Users> users = new List<Users>();
    private List<Grades> grades = new List<Grades>();
    private List<Classes> classes = new List<Classes>();
    private List<Subjects> subjects = new List<Subjects>();
    private List<Subjects> FilteredUserstudent => string.IsNullOrEmpty(SearchText)
     ? subjects
     : subjects.Where(o => o.Name.ToString().Contains(SearchText))
              .ToList();
    protected override async Task OnInitializedAsync()
    {
        await GetAllGrade();

    }
    private async Task Getallteacher()
    {
        teacherDTOs = await client.GetFromJsonAsync<List<TeacherDTO>>("https://localhost:7046/api/Teacher/get-all-teacher");
    }
    private async Task GetTeacher(Guid id){
        users = await client.GetFromJsonAsync<List<Users>>($"https://localhost:7046/api/Classes/Listteachersubj?idsbj={id}");
    }
    private async Task GetAllClass(Guid id)
    {
        classes = await client.GetFromJsonAsync<List<Classes>>($"https://localhost:7046/api/Classes/Get-Grade-Class?gradeId={id}");
        if (classes.Any())
        {
            selectidclass = classes.OrderBy(x => x.Name).First().Id;
        }
        else
        {
            selectidclass = Guid.Empty;
        }

    }
    private async Task GetAllGrade()
    {
        grades = await client.GetFromJsonAsync<List<Grades>>("https://localhost:7046/api/Grade/get-grade");
    }
    private async Task getallsubject(Guid id)
    {
        subjects = await client.GetFromJsonAsync<List<Subjects>>($"https://localhost:7046/api/Classes/ListSubjectFor?IdClass={id}");

    }
    private string SearchText { get; set; }

}


