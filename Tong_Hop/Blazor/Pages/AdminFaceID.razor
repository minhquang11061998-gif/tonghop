@page "/face-registration"
@using DataBase.DTOs
@using global::Data.DTOs
@layout AdminLayout
@inject HttpClient Http
@inject IJSRuntime jsruntime

<div class="container">
    <div class="row d-flex">
        <div class="col-7">
            <table class="table rounded shadow table-hover table-bordered bg-primary table-3d">
                <thead class="thead-dark text-center bg-primary" style="overflow-x:hidden;overflow-y:auto">
                    <tr>
                        <th scope="col" class="text-center">STT</th>
                        <th scope="col">Họ và Tên</th>
                        <th scope="col">Email</th>
                        <th scope="col">Trạng thái</th>
                        <th scope="col" class="text-center">Thao tác</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in StudentDTOs)
                    {
                        <tr class="align-middle table-light row-3d">
                            <td class="text-center">@(StudentDTOs.IndexOf(item) + 1)</td>
                            <td>@item.Name</td>
                            <td>@item.Email</td>
                            <td>@(item.IsRegistered ? "Đã đăng ký" : "Chưa đăng ký")</td>
                            <td class="text-center">
                                <button  class="btn btn-sm btn-success rounded-pill me-2 px-3"  @onclick="()=>capture(item.Id)">
                                    Đăng ký
                                </button>
                                <button @onclick="start" class="btn btn-sm btn-danger rounded-pill px-3">
                                    Xóa
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <div class="col-5">
            <div class="border-danger">
                <video id="cam_input" height="480" width="640" style="display:none ;border"></video>
                <canvas id="canvas_output" width="640" height="480"></canvas>

            </div>
        </div>
    </div>
</div>
@code {
    private List<StudentDTO> StudentDTOs = new List<StudentDTO>();
    private FaceDTO faceDTOs = new FaceDTO();

    protected override async Task OnInitializedAsync()
    {
        StudentDTOs = await Http.GetFromJsonAsync<List<StudentDTO>>("https://apismartschools.azurewebsites.net/api/Student/get-all-student2");

    }
    private async Task start()
    {
        await jsruntime.InvokeVoidAsync("startcamera");
    }
    private async Task capture(Guid id)
    {
        try
        {
            // Gọi hàm JS để chụp ảnh và nhận Base64
            string base64Image = await jsruntime.InvokeAsync<string>("getBase64Face");
            if (!string.IsNullOrEmpty(base64Image))
            {
                faceDTOs.img = base64Image;
                faceDTOs.StudentID = id;

                var response = await Http.PostAsJsonAsync($"https://apismartschools.azurewebsites.net/api/FaceId/register-face?userId={id}", faceDTOs);

                if (response.IsSuccessStatusCode)
                {
                    await jsruntime.InvokeVoidAsync("alert", "Đăng ký khuôn mặt thành công!");
                }
                else
                {
                    var errorContent = await response.Content.ReadAsStringAsync();
                    await jsruntime.InvokeVoidAsync("alert", $"Đăng ký thất bại: {errorContent}");
                }
            }
            else
            {
                await jsruntime.InvokeVoidAsync("alert", "Không thể chụp ảnh. Vui lòng kiểm tra lại camera.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Lỗi: {ex.Message}");
            await jsruntime.InvokeVoidAsync("alert", $"Lỗi xảy ra: {ex.Message}");
        }
    }

}
<script type="text/JavaScript">
    window.video = window.video || document.getElementById("cam_input");
    var caps;
    var faces;
    var classifier;
    function openCvReady() {
        // Khởi tạo các đối tượng OpenCV
        let cap = new cv.VideoCapture(video);
        let src = new cv.Mat(window.video.height, window.video.width, cv.CV_8UC4);
        let dst = new cv.Mat(window.video.height, window.video.width, cv.CV_8UC1);
        let gray = new cv.Mat();
        let utils = new Utils('errorMessage');
        let faceCascadeFile = 'haarcascade_frontalface_default.xml';
        classifier = new cv.CascadeClassifier();

        // Tải cascade classifier
        utils.createFileFromUrl(faceCascadeFile, faceCascadeFile, () => {
            classifier.load(faceCascadeFile);
        });

        caps = new cv.VideoCapture(video);
        faces = new cv.RectVector();
        const FPS = 24;

        // Chạy vòng lặp nhận diện khuôn mặt
        function processVideo() {
            let canvas = document.getElementById("canvas_output");
            if (!canvas) {
                console.error("Canvas element not found!");
                return;
            }

            let begin = Date.now();
            cap.read(src);
            src.copyTo(dst);
            cv.cvtColor(dst, gray, cv.COLOR_RGBA2GRAY, 0);

            try {
                classifier.detectMultiScale(gray, faces, 1.1, 3, 0);
                console.log(faces.size());
            } catch (err) {
                console.log(err);
            }

            // Vẽ hình chữ nhật quanh khuôn mặt
            for (let i = 0; i < faces.size(); ++i) {
                let face = faces.get(i);
                let point1 = new cv.Point(face.x, face.y);
                let point2 = new cv.Point(face.x + face.width, face.y + face.height);
                cv.rectangle(dst, point1, point2, [255, 0, 0, 255]);
            }

            // Hiển thị ảnh lên canvas
            cv.imshow(canvas, dst);

            // Lên lịch vòng lặp tiếp theo
            requestAnimationFrame(processVideo);
        }

        // Bắt đầu quá trình nhận diện
        requestAnimationFrame(processVideo);
    };

    // Hàm khởi động camera
    async function startcamera() {
        navigator.mediaDevices.getUserMedia({ video: true, audio: false })
            .then(function (stream) {
                video.srcObject = stream;
                video.play();
                openCvReady();
            })
            .catch(function (err) {
                console.log("An error occurred! " + err);
            });
    }

    // Hàm lấy ảnh khuôn mặt dưới dạng Base64
    async function getBase64Face() {
        if (!classifier || !caps || !faces) {
            console.log("OpenCV is not ready.");
            return null;
        }

        let src = new cv.Mat(video.height, video.width, cv.CV_8UC4);
        let gray = new cv.Mat();

        caps.read(src);
        cv.cvtColor(src, gray, cv.COLOR_RGBA2GRAY, 0);

        // Phát hiện khuôn mặt
        classifier.detectMultiScale(gray, faces, 1.1, 3, 0);

        if (faces.size() > 0) {
            let canvas = document.getElementById("canvas_output");
            if (!canvas) {
                console.error("Canvas element not found!");
                return null;
            }

            canvas.width = window.video.videoWidth;
            canvas.height = window.video.videoHeight;

            var ctx = canvas.getContext("2d");
            ctx.drawImage(video, 0, 0, canvas.width, canvas.height);

            // Chuyển canvas thành Base64
            const base64Image = canvas.toDataURL("image/jpeg", 0.8);
            return base64Image.split(",")[1]; // Chỉ lấy phần Base64
        }

        return null;
    }
</script>
