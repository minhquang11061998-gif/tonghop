@page "/face-registration"
@using DataBase.DTOs
@using DataBase.Models
@using global::Data.DTOs
@layout AdminLayout
@inject HttpClient Http
@inject NavigationManager navigate
@inject IHttpClientFactory clientFactory
@inject IJSRuntime JS
<div class="row min-vh-100">
    <div class=" d-flex ">
        <div class="col-2  shadow">
            <div class=" border shadow-sm" style="background-color:cornflowerblue">
                <h5 class="text-white d-flex justify-content-center align-items-center">Thư mục</h5>
            </div>
            <div>
                @foreach (var item in gradeDTOs.OrderBy(g => g.Name))
                {
                    <div>
                        <!-- Hiển thị khối -->
                        <span class="target" value="@item.Id" type="button" @onclick="() => ToggleGrade(item.Id)">
                            <i class="bi bi-folder-fill text-warning p-1 ps-2 fs-5"></i>Khối @item.Name
                        </span>
                        <!-- Hiển thị danh sách lớp thuộc khối -->
                        @if (IsGradeOpen(item.Id))
                        {
                            <ul>
                                @if (classes != null && classes.Any(c => c.GradeId == item.Id))
                                {
                                    @foreach (var classItem in classes.Where(c => c.GradeId == item.Id).OrderBy(c => c.Name))
                                    {
                                        <div>
                                            <span class="target" type="button" value="@classItem.Id" @onclick="()=>GetAllIDclass(classItem.Id)"><i class="bi bi-folder-fill text-warning p-1"></i>@classItem.Name</span>
                                        </div>

                                    }
                                }
                                else
                                {
                                    <li class="nav-link">
                                        <i class="bi bi-folder-fill text-warning p-1"></i>Không có lớp nào.
                                    </li>
                                }
                            </ul>
                        }
                    </div>

                }

            </div>
        </div>
        <div class="col-10">
            <div class="border shadow-sm d-flex justify-content-between" style="background-color:cornflowerblue">
                <div class="p-1 align-items-center">
                    <h5 class="text-white" style="font-size:15px">Thông tin chi tiết</h5>
                </div>
            </div>
            <div class="table-wrapper">
                <table class="table table-hover table-striped ">
                    <thead class="table-primary text-center">
                        <tr>
                            <th>STT</th>
                            <th>Mã Học Sinh</th>
                            <th>Họ và Tên</th>
                            <th>Ảnh</th>
                            <th>Email</th>
                            <th>Ngày Sinh</th>
                            <th>Số Điện Thoại</th>
                            <th>Hành Động</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (getallStudentDT0s != null && getallStudentDT0s.Any())
                        {
                            @foreach (var detail in getallStudentDT0s)
                            {
                                <tr>
                                    <td class="text-center">@(getallStudentDT0s.IndexOf(detail) + 1)</td>
                                    <td class="text-center">@detail.codestudent</td>
                                    <td>@detail.Name</td>
                                    <td class="text-center">
                                        <img src="@detail.picture" alt="Học sinh" class="img-thumbnail" style="width: 50px; height: 50px;" />
                                    </td>
                                    <td>@detail.Email</td>
                                    <td class="text-center">@detail.dateofbirt.ToString("dd/MM/yyyy")</td>
                                    <td class="text-center">@detail.PhoneNumber</td>
                                    <td class="text-center">
                                        <button class="btn btn-success" @onclick="()=>showdata(detail.idstudent)">đăng kí</button>
                                        <button class="btn btn-sm btn-danger rounded-pill px-3" @onclick="() => delete(detail.idstudent.ToString())">
                                            Xóa
                                        </button>
                                    </td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="10" class="text-center text-muted">Không có dữ liệu để hiển thị</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<div class="modal fade @(showfaceid ? "show" : "")" tabindex="-1" aria-hidden="true" style="display:@(showfaceid ? "block" : "none"); background-color: rgba(0,0,0,0.5);">
    <div class="modal-dialog modal-dialog-centered modal-md">
        <div class="modal-content">
            <!-- Header -->
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title">Cập nhật thông tin khuôn mặt</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="closefaceid"></button>
            </div>

            <!-- Body -->
            <div class="modal-body">
                <div >
                    <div style="position: relative; display: inline-block; border: 1px solid #ccc; border-radius: 8px; overflow: hidden;">
                        <img id="cameraStream" src="https://localhost:7046/api/FaceId/camera-stream" alt="Camera Stream" class="img-fluid" style="max-width: 100%; height: auto;" />
                        <canvas id="faceCanvas" style="position: absolute; top: 0; left: 0; pointer-events: none; width: 100%; height: 100%;"></canvas>
                    </div>
                </div>

            </div>

            <!-- Footer -->
            <div class="modal-footer">
                <button class="btn btn-sm btn-success rounded-pill me-2 px-3" @onclick="() => RegisterFaceAsync(idstudent.ToString())">
                    Đăng ký
                </button>
            </div>
        </div>
    </div>
</div>
@code {
    private List<StudentDTO> studentDTOs = new List<StudentDTO>();
    private List<GradeDTO> gradeDTOs = new List<GradeDTO>();
    private List<Classes> classes = new List<Classes>();
    private List<GetallStudentDT0> getallStudentDT0s = new List<GetallStudentDT0>();
    private bool showfaceid = false;
    private Guid idstudent;
    private void showdata(Guid id){
        idstudent= id;
        showfaceid = true;
    }
    private void closefaceid(){
        showfaceid = false;
    }
    protected override async Task OnInitializedAsync()
    {
        var httpClient = clientFactory.CreateClient("student");
        gradeDTOs = await httpClient.GetFromJsonAsync<List<GradeDTO>>("https://localhost:7046/api/Grade/get-grade");
        LoadClasses();
    }
    private Dictionary<Guid, bool> openGradeStates = new Dictionary<Guid, bool>();
    private bool IsGradeOpen(Guid gradeId)
    {
        return openGradeStates.ContainsKey(gradeId) && openGradeStates[gradeId];
    }
    private void ToggleGrade(Guid gradeID)
    {
        if (openGradeStates.ContainsKey(gradeID))
        {
            openGradeStates[gradeID] = !openGradeStates[gradeID];
        }
        else
        {
            openGradeStates[gradeID] = true;
        }
    }
    private async Task LoadClasses()
    {
        classes = await Http.GetFromJsonAsync<List<Classes>>("https://localhost:7046/api/Classes/get-all-class");
    }
    private async Task GetAllIDclass(Guid id)
    {
        getallStudentDT0s = await Http.GetFromJsonAsync<List<GetallStudentDT0>>($"https://localhost:7046/api/Student/get-all-ID-class?id={id}");
    }
    private async Task delete(string id)
    {
        var resrpon = await Http.DeleteAsync($"https://localhost:7046/api/FaceId/remove-face?userId={id}");
        if (resrpon.IsSuccessStatusCode)
        {
            await JS.InvokeVoidAsync("alert", "xóa dữ liệu thành công");
        }
        else { await JS.InvokeVoidAsync("alert", "xóa dữ liệu thất bại"); }

    }
    private async Task RegisterFaceAsync(string userId)
    {
        if (string.IsNullOrWhiteSpace(userId))
        {
            await JS.InvokeVoidAsync("alert", "vui lòng nhập ID user");
            return;
        }

        try
        {
            var response = await Http.PostAsync($"https://localhost:7046/api/FaceId/register-face?userId={userId}", null);
            if (response.IsSuccessStatusCode)
            {
               
                await JS.InvokeVoidAsync("alert", "thêm dữ liệu  thành công");
                await JS.InvokeVoidAsync("reloadCameraFeed");
                showfaceid = false;
            }
            else
            {
                var errorResponse = await response.Content.ReadAsStringAsync();
                await JS.InvokeVoidAsync("alert", "thêm dữ liệu không thành công");
                await JS.InvokeVoidAsync("reloadCameraFeed");
            }
        }
        catch (Exception)
        {
            await JS.InvokeVoidAsync("alert", "thêm dữ liệu không thành công");
            await JS.InvokeVoidAsync("reloadCameraFeed");
        }
    }
}
<script>
    function reloadCameraFeed() {
        const cameraImage = document.querySelector("#cameraStream");
        if (cameraImage) {
            cameraImage.src = "https://localhost:7046/api/FaceId/camera-stream?" + new Date().getTime();
        }
    }
</script>