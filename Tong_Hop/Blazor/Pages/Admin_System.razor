@page "/teacher-system"
@using DataBase.Models
@using global::Data.DTOs
@layout AdminLayout
@inject HttpClient client
@inject IJSRuntime jsRuntime
@inject NavigationManager navigate

<div class="container-fluid pt-5">
    <div style="display: flex;">
        <div style="flex: 2; padding-right: 20px;">
            <table class="table-fixed">
                <thead>
                    <tr>
                        <th>STT</th>
                        <th>Họ tên</th>
                        <th>SĐT</th>
                        <th>Email</th>
                        <th>Trạng thái</th>
                        <th>Hành động</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var n in systemConfigs)
                    {
                        <tr>
                            <td>@(systemConfigs.IndexOf(n) + 1)</td>
                            <td>@n.Name</td>
                            <td>@n.PhoneNumber</td>
                            <td>@n.Email</td>
                            <td>
                                @if (n.IsViewed)
                                {
                                    <span class="status viewed">Đã xem</span>
                                }
                                else
                                {
                                    <span class="status not-viewed">Chưa xem</span>
                                }
                            </td>
                            <td>
                                <button class="btn-view" @onclick="() => ShowDetails(n)">Xem chi tiết</button>
                                <button class="btn-delete" @onclick="()=> delete(n.Id)">Xóa</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <div style="flex: 1; padding: 20px; border-left: 1px solid #e0e0e0; background-color: #f0f9ff;">
            @if (selectedConfig != null)
            {
                <h4 class="details-title">Chi tiết thông tin</h4>
                <div class="details">
                    <p><strong>Họ tên:</strong> @selectedConfig.Name</p>
                    <p><strong>SĐT:</strong> @selectedConfig.PhoneNumber</p>
                    <p><strong>Email:</strong> @selectedConfig.Email</p>
                    <p><strong>Địa chỉ:</strong> @selectedConfig.address</p>
                    <p><strong>Thông tin:</strong> @selectedConfig.Value</p>
                </div>
            }
            else
            {
                <p class="no-selection">Vui lòng chọn một giáo viên để xem chi tiết.</p>
            }
        </div>
    </div>
</div>


@code {
    private List<SystemConfigs> systemConfigs = new List<SystemConfigs>();
    private SystemConfigs selectedConfig; // Lưu thông tin giáo viên đã chọn
    protected override async Task OnInitializedAsync()
    {
        systemConfigs = await client.GetFromJsonAsync<List<SystemConfigs>>("api/SystemConfig/get-all-SystemConfig");
    }

    private async Task MarkAsViewed(Guid id)
    {
        var config = systemConfigs.FirstOrDefault(x => x.Id == id);
        if (config != null)
        {
            config.IsViewed = true; // Đánh dấu là đã xem
            var response = await client.PostAsJsonAsync($"api/SystemConfig/mark-as-viewed/{id}", config);

            if (response.IsSuccessStatusCode)
            {
                // Cập nhật danh sách chỉ khi API trả về thành công
                systemConfigs = await client.GetFromJsonAsync<List<SystemConfigs>>("api/SystemConfig/get-all-SystemConfig");
            }
            else
            {
                // Có thể hiển thị thông báo lỗi ở đây nếu cần
                Console.WriteLine("Failed to update the viewed status.");
            }
        }
    }
    private async Task delete(Guid Id)
    {
        var response = await client.DeleteAsync($"api/SystemConfig/delete-system?Id={Id}");
        if (response.IsSuccessStatusCode)
        {
            await jsRuntime.InvokeVoidAsync("Swal.fire", new
            {
                title = "Thành công!",
                text = "Xóa đữ liệu thành công!",
                icon = "success",
                confirmButtonText = "OK"
            });
            navigate.NavigateTo(navigate.Uri, forceLoad: true);
        }
        else
        {
            await jsRuntime.InvokeVoidAsync("Swal.fire", new
            {
                title = "Thất bại!",
                text = "Xóa dữ liệu thất bại.",
                icon = "error",
                confirmButtonText = "OK"
            });
            navigate.NavigateTo(navigate.Uri, forceLoad: true);
        }
    }
    private async Task ShowDetails(SystemConfigs config)
    {
        await MarkAsViewed(config.Id); // Đánh dấu là đã xem
        selectedConfig = config; // Lưu thông tin giáo viên đã chọn
        StateHasChanged(); // Tái tạo giao diện người dùng
    }
}
