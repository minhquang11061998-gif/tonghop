@page "/create-student-class"
@using DataBase.Models
@using Database.DTOs
@using System.Text.Json
@using global::Data.DTOs
@inject HttpClient http
@inject NavigationManager navi
@layout AdminLayout

<h3>Tạo Học Sinh - Lớp Học</h3>

<EditForm Model="studentClassItem" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="student" class="form-label">Học sinh</label>
        <select id="student" class="form-select" @bind="studentClassItem.StudentId" required>
            <option value="">Chọn học sinh</option>
            @foreach (var student in students)
            {
                <option value="@student.Id">@student.Code</option> <!-- Hiển thị tên học sinh -->
            }
        </select>
    </div>

    <div class="mb-3">
        <label for="class" class="form-label">Lớp học</label>
        <select id="class" class="form-select" @bind="studentClassItem.ClassId" required>
            <option value="">Chọn lớp học</option>
            @foreach (var classItem in classes)
            {
                <option value="@classItem.Id">@classItem.Name</option> <!-- Hiển thị tên lớp học -->
            }
        </select>
    </div>


    <div class="mb-3">
        <label for="status" class="form-label">Trạng thái</label>
        <InputNumber id="status" class="form-control" @bind-Value="studentClassItem.Status" required />
    </div>

    <div class="mb-3">
        <button type="submit" class="btn btn-primary">Lưu</button>
        <button type="button" class="btn btn-secondary" @onclick="Cancel">Quay lại</button>
    </div>
</EditForm>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}

@code {
    private StudentClassDTO studentClassItem = new StudentClassDTO();
    private List<Students> students = new List<Students>();
    private List<Classes> classes = new List<Classes>();
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadStudentsAndClasses();
    }

    private async Task LoadStudentsAndClasses()
    {
        students = await http.GetFromJsonAsync<List<Students>>("api/Student/get-all-student2");
        classes = await http.GetFromJsonAsync<List<Classes>>("api/Classes/get-all-class");
    }

    private async Task HandleValidSubmit()
    {
        // Log thông tin của studentClassItem trước khi gửi
        Console.WriteLine($"StudentClass Item: {JsonSerializer.Serialize(studentClassItem)}");

        // Thực hiện gửi yêu cầu tạo mới Student_Class
        var response = await http.PostAsJsonAsync("api/StudentClass/create", studentClassItem);

        // Kiểm tra phản hồi từ server
        if (response.IsSuccessStatusCode)
        {
            // Chuyển hướng về danh sách nếu thành công
            navi.NavigateTo("/student-classes");
        }
        else
        {
            // Xử lý khi tạo không thành công
            errorMessage = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"Error creating student class: {errorMessage}");
        }
    }

    private void Cancel()
    {
        navi.NavigateTo("/student-classes");
    }
}
