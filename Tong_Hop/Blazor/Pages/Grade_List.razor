@page "/listGrade"
@using DataBase.DTOs
@using DataBase.Models
@using System.Net.Http.Json
@using System.IdentityModel.Tokens.Jwt
@using global::Data.DTOs
@layout AdminLayout
@inject HttpClient client
@inject IHttpClientFactory clientFactory
@inject NavigationManager navigation
@inject IJSRuntime Jsruntime

<div>
    <div class="row fixed-top" style="margin-top:100px">
        <div class="border d-flex">
            <div class="col-2">
                <div class="border shadow-sm" style="background-color:cornflowerblue">
                    <h5 class="text-white d-flex justify-content-center align-items-center">Thư mục</h5>
                </div>
                <div class="border min-vh-100">
                    @if (gradeDTOs != null && gradeDTOs.Any())
                    {
                        @foreach (var item in gradeDTOs.OrderBy(g => g.Name))
                        {
                            <div>
                                <!-- Hiển thị khối -->
                                <span class="target" value="@item.Id" type="button" @onclick="() => ToggleGrade(item.Id)">
                                    <i class="bi bi-folder-fill text-warning p-1 ps-2 fs-5"></i>Khối @item.Name
                                </span>

                                <!-- Menu ngữ cảnh -->
                                <div id="contextMenu" class="context-menu">
                                    <div class="context-menu-item" @onclick="ShowCreateGradeModal">Tạo khối</div>
                                    <div class="context-menu-item" @onclick="()=>ShowGradeModal(item.Id)">Tạo lớp</div>
                                    <div class="context-menu-item" @onclick="() => deletegrade(item.Id)">Xóa</div>
                                </div>

                                <!-- Hiển thị danh sách lớp thuộc khối -->
                                @if (selectedGradeId1 == item.Id)
                                {
                                    <ul>
                                        @if (classes != null && classes.Any(c => c.GradeId == item.Id))
                                        {
                                            @foreach (var classItem in classes.Where(c => c.GradeId == item.Id).OrderBy(c => c.Name))
                                            {
                                                <div>
                                                    <span class="target" type="button" value="@classItem.Id" @onclick="()=>GetAllIDclass(classItem.Id)" @oncontextmenu="(e) => OnRightClick(e, classItem.Id)"><i class="bi bi-folder-fill text-warning p-1"></i>@classItem.Name</span>
                                                    <div id="contextMenu" class="context-menu">
                                                        <div class="context-menu-item" @onclick="showimportstudent">nhập học sinh</div>
                                                        <div class="context-menu-item" @onclick="()=>deleteclass(classItem.Id)">Xóa</div>
                                                        
                                                    </div>
                                                </div>
                                                
                                            }
                                        }
                                        else
                                        {
                                            <li class="nav-link">
                                                <i class="bi bi-folder-fill text-warning p-1" @onclick="()=>ShowGradeModal(item.Id)"></i>Không có lớp nào.
                                            </li>
                                        }
                                    </ul>
                                }
                            </div>
                        }
                    }
                    else
                    {
                        <!-- Nếu không có khối, hiển thị nút tạo khối -->
                        <div class="text-center mt-4">
                            <span class="target" type="button" @onclick="ShowCreateGradeModal">
                                <i class="bi bi-folder-fill text-warning p-1"></i>Thêm khối mới
                            </span>
                        </div>
                    }
                </div>
            </div>
            <div class="modal fade @(isShowGradeModalVisible ? "show" : "")" tabindex="-1" style="display:@(isShowGradeModalVisible ? "block" : "none"); background-color: rgba(0,0,0,0.5);">
                <div class="modal-dialog modal-lg modal-dialog-centered">
                    <div class="modal-content">
                        <div class="modal-header bg-primary text-white">
                            <h5 class="modal-title">@((selectedGradeId == Guid.Empty) ? "Tạo khối mới" : "Tạo lớp mới")</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <!-- Tên khối -->
                            <div class="mb-4">
                                <label for="gradeName" class="form-label fw-bold">Tên khối:</label>
                                <input type="text" id="gradeName" class="form-control form-control-lg" @bind="classesDTOs.Name" placeholder="Nhập tên lớp" />
                            </div>

                            <!-- Các nút hành động -->
                            <div class="d-flex justify-content-end gap-3">
                                <button type="button" class="btn btn-primary btn-lg" @onclick="()=>createclass(selectedGradeId)">Lưu</button>
                                <button type="button" class="btn btn-secondary btn-lg" @onclick="HideCreateGradeModal">Đóng</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-10">
                <div class="border shadow-sm d-flex justify-content-between" style="background-color:cornflowerblue">
                    <div class="p-1 align-items-center">
                        <h5 class="text-white" style="font-size:15px">Thông tin chi tiết</h5>
                    </div>
                </div>
                <div class="table-wrapper">
                    <table class="table table-hover table-striped ">
                        <thead class="table-primary text-center">
                            <tr>
                                <th>STT</th>
                                <th>Mã Học Sinh</th>
                                <th>Họ và Tên</th>
                                <th>Ảnh</th>
                                <th>Email</th>
                                <th>Tài Khoản</th>
                                <th>Mật Khẩu</th>
                                <th>Ngày Sinh</th>
                                <th>Số Điện Thoại</th>
                                <th>Hành Động</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (getallStudentDT0s != null && getallStudentDT0s.Any())
                            {
                                @foreach (var detail in getallStudentDT0s)
                                {
                                    <tr>
                                        <td class="text-center">@(getallStudentDT0s.IndexOf(detail) + 1)</td>
                                        <td class="text-center">@detail.codestudent</td>
                                        <td>@detail.Name</td>
                                        <td class="text-center">
                                            <img src="@detail.picture" alt="Học sinh" class="img-thumbnail" style="width: 50px; height: 50px;" />
                                        </td>
                                        <td>@detail.Email</td>
                                        <td>@detail.Username</td>
                                        <td>@detail.Password</td>
                                        <td class="text-center">@detail.dateofbirt.ToString("dd/MM/yyyy")</td>
                                        <td class="text-center">@detail.PhoneNumber</td>
                                        <td class="text-center">
                                            <span type="button" @onclick="()=>showupdate(detail.Id)" value="@detail.idclass" class="btn btn-sm btn-warning me-1">
                                                <i class="bi bi-pencil"></i>
                                            </span>
                                            <span type="button" @onclick="()=>delete(detail.Id,detail.idclass)" class="btn btn-sm btn-danger">
                                                <i class="bi bi-trash3"></i>
                                            </span>
                                        </td>
                                    </tr>
                                }
                            }
                            else
                            {
                                <tr>
                                    <td colspan="10" class="text-center text-muted">Không có dữ liệu để hiển thị</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
                <div class="modal fade @(isCreateGradeModalVisible ? "show" : "")" tabindex="-1" style="display:@(isCreateGradeModalVisible ? "block" : "none"); background-color: rgba(0,0,0,0.5);">
                    <div class="modal-dialog modal-lg modal-dialog-centered">
                        <div class="modal-content">
                            <div class="modal-header bg-primary text-white">
                                <h5 class="modal-title">@((selectedGradeId == Guid.Empty) ? "Tạo khối mới" : "Tạo lớp mới")</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                            </div>
                            <div class="modal-body">
                                <!-- Tên khối -->
                                <div class="mb-4">
                                    <label for="gradeName" class="form-label fw-bold">Tên khối:</label>
                                    <input type="text" id="gradeName" class="form-control form-control-lg" @bind="gradeDTO.Name" placeholder="Nhập tên khối" />
                                </div>

                                <!-- Trạng thái -->
                                <div class="mb-4">
                                    <label for="status" class="form-label fw-bold">Trạng thái:</label>
                                    <select id="status" class="form-select form-select-lg" @bind="gradeDTO.Status">
                                        <option value="1">Hoạt động</option>
                                        <option value="0">Không hoạt động</option>
                                    </select>
                                </div>

                                <!-- Các nút hành động -->
                                <div class="d-flex justify-content-end gap-3">
                                    <button type="button" class="btn btn-primary btn-lg" @onclick="SubmitGrade">Lưu</button>
                                    <button type="button" class="btn btn-secondary btn-lg" @onclick="HideCreateGradeModal">Đóng</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="modal fade @(isExcelModalVisible ? "show" : "")" tabindex="-1" style="display:@(isExcelModalVisible ? "block" : "none"); background-color: rgba(0,0,0,0.5);">
    <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content">
            <!-- Tiêu đề -->
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title @(selectedClassId=Guid.Empty)?">Nhập dữ liệu học sinh</h5>
                <button type="button" class="btn-close" aria-label="Close" @onclick="HideCreateGradeModal"></button>
            </div>
            <!-- Nội dung -->
            <div class="modal-body">
                <div class="mb-3">
                    <div class="mb-3 text-center">
                        <!-- Nhãn tải lên tệp -->
                        <label for="fileInput" class="btn btn-outline-primary" style="cursor: pointer;">
                            <i class="bi bi-upload"></i> Chọn file Excel
                        </label>
                        <!-- Input file -->
                        <InputFile OnChange="HandleFileSelected"  id="fileInput" class="form-control d-none" oninput="fileNameDisplay.value = fileInput.value" />
                        <!-- Hiển thị tên file -->
                        <input type="text" id="fileNameDisplay" class="form-control mt-2 text-muted text-center" placeholder="File chưa được chọn" readonly />
                    </div>
                </div>
                <div class="text-center">
                    <button type="button" class="btn btn-primary me-2" @onclick="()=>UploadFile(classesDTOs.Id)">Lưu</button>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal fade @(importexcelmodal ? "show" : "")" tabindex="-1" style="display:@(importexcelmodal ? "block" : "none"); background-color: rgba(0,0,0,0.5);">
    <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content">
            <!-- Modal Header -->
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title">Thêm mới học sinh</h5>
                <button type="button" class="btn-close" aria-label="Close" @onclick="HideCreateGradeModal"></button>
            </div>
            <!-- Modal Body -->
            <div class="modal-body">
                <div class="container">
                    <!-- Form nhập thông tin -->
                    <EditForm Model="@user" class="p-4 shadow-sm bg-white rounded">
                        <DataAnnotationsValidator />
                        <div class="row g-2">
                            <h5 class="text-primary">Thông tin cá nhân</h5>
                            <div class="col-md-6">
                                <label for="fullName" class="form-label">Họ và tên:</label>
                                <InputText id="fullName" class="form-control" @bind-Value="@user.FullName" placeholder="Nhập họ và tên" />
                                <ValidationMessage For="@(() => user.FullName)" class="text-danger small" />
                            </div>

                            <div class="col-md-6">
                                <label for="avatarFile" class="form-label">Hình ảnh:</label>
                                <InputFile id="avatarFile" class="form-control" OnChange="@HandleFileSelecteds" />
                            </div>

                            <div class="col-md-6">
                                <label for="email" class="form-label">Email:</label>
                                <InputText id="email" class="form-control" @bind-Value="@user.Email" placeholder="Nhập email" />
                                <ValidationMessage For="@(() => user.Email)" class="text-danger small" />
                            </div>

                            <div class="col-md-6">
                                <label for="dateOfBirth" class="form-label">Ngày sinh:</label>
                                <InputDate id="dateOfBirth" class="form-control" @bind-Value="@user.DateOfBirth" />
                                <ValidationMessage For="@(() => user.DateOfBirth)" class="text-danger small" />
                            </div>
                        </div>

                        <!-- Tài khoản và trạng thái -->
                        <div class="row g-4 mt-4">
                            <h5 class="text-primary">Thông tin tài khoản</h5>
                            <div class="col-md-6">
                                <label for="userName" class="form-label">Tên đăng nhập:</label>
                                <InputText id="userName" class="form-control" @bind-Value="@user.UserName" placeholder="Nhập tên đăng nhập" />
                                <ValidationMessage For="@(() => user.UserName)" class="text-danger small" />
                            </div>

                            <div class="col-md-6">
                                <label for="password" class="form-label">Mật khẩu:</label>
                                <InputText id="password" type="password" class="form-control" @bind-Value="@user.PasswordHash" placeholder="Nhập mật khẩu" />
                                <ValidationMessage For="@(() => user.PasswordHash)" class="text-danger small" />
                            </div>

                            <div class="col-md-6">
                                <label for="phoneNumber" class="form-label">Số điện thoại:</label>
                                <InputText id="phoneNumber" class="form-control" @bind-Value="@user.PhoneNumber" placeholder="Nhập số điện thoại" />
                                <ValidationMessage For="@(() => user.PhoneNumber)" class="text-danger small" />
                            </div>

                            <div class="col-md-6">
                                <label for="status" class="form-label">Trạng thái:</label>
                                <InputSelect id="status" class="form-select" @bind-Value="@user.Status">
                                    <option value="1">Hoạt động</option>
                                    <option value="2">Không hoạt động</option>
                                </InputSelect>
                                <ValidationMessage For="@(() => user.Status)" class="text-danger small" />
                            </div>
                        </div>
                    </EditForm>
                </div>
            </div>

            <!-- Modal Footer -->
            <div class="modal-footer">
                <div class="d-flex justify-content-around">
                    <!-- Nút thêm file Excel -->
                    <button type="button" class="btn btn-outline-primary btn-lg" @onclick="showexcel">
                        <i class="bi bi-file-earmark-excel"></i> Thêm từ file Excel
                    </button>

                    <!-- Nút tải file mẫu Excel -->
                    <button type="button" class="btn btn-outline-success btn-lg" @onclick="dowloadexcel">
                        <i class="bi bi-download"></i> Tải file mẫu
                    </button>
                    <button type="submit" @onclick="()=>HandleValidSubmit(classesDTOs.Id)" class="btn btn-primary">Lưu Thông Tin</button>
                </div>
               
            </div>
        </div>
    </div>
</div>

<div class="modal fade @(showupdatestudent ? "show" : "")" tabindex="-1" aria-hidden="true" style="display:@(showupdatestudent ? "block" : "none"); background-color: rgba(0,0,0,0.5);">
    <div class="modal-dialog modal-dialog-centered modal-md">
        <div class="modal-content">
            <!-- Header -->
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title">Cập nhật thông tin học sinh</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="HideCreateGradeModal"></button>
            </div>

            <!-- Body -->
            <div class="modal-body">
                <div class="row">
                    <!-- Họ và tên -->
                    <div class="col-12 col-md-6 mb-3">
                        <label for="fullName" class="form-label fw-bold">Họ và tên:</label>
                        <input type="text" id="fullName" class="form-control" @bind="userDTOs.FullName" placeholder="Nhập họ và tên" />
                    </div>

                    <!-- Ảnh -->
                    <div class="col-12 col-md-6 mb-3">
                        <label for="avatar" class="form-label fw-bold">Ảnh:</label>
                        <input type="text" id="avatarFile" class="form-control" @bind="userDTOs.Avartar" placeholder="URL ảnh đại diện" />
                    </div>

                    <!-- Email -->
                    <div class="col-12 col-md-6 mb-3">
                        <label for="email" class="form-label fw-bold">Email:</label>
                        <input type="email" id="email" class="form-control" @bind="userDTOs.Email" placeholder="Nhập email" />
                    </div>

                    <!-- Tài khoản -->
                    <div class="col-12 col-md-6 mb-3">
                        <label for="username" class="form-label fw-bold">Tài khoản:</label>
                        <input type="text" id="username" class="form-control" @bind="userDTOs.UserName" placeholder="Nhập tài khoản" />
                    </div>

                    <!-- Mật khẩu -->
                    <div class="col-12 col-md-6 mb-3">
                        <label for="password" class="form-label fw-bold">Mật khẩu:</label>
                        <input type="text" id="password" class="form-control" @bind="userDTOs.PasswordHash" placeholder="Nhập mật khẩu" />
                    </div>

                    <!-- Ngày sinh -->
                    <div class="col-12 col-md-6 mb-3">
                        <label for="dob" class="form-label fw-bold">Ngày sinh:</label>
                        <input type="date" id="dob" class="form-control" @bind="userDTOs.DateOfBirth" />
                    </div>

                    <!-- Số điện thoại -->
                    <div class="col-12 col-md-6 mb-3">
                        <label for="phone" class="form-label fw-bold">Số điện thoại:</label>
                        <input type="text" id="phone" class="form-control" @bind="userDTOs.PhoneNumber" placeholder="Nhập số điện thoại" />
                    </div>

                    <!-- Trạng thái -->
                    <div class="col-12 mb-3">
                        <label for="status" class="form-label fw-bold">Trạng thái:</label>
                        <select id="status" class="form-select" @bind="gradeDTO.Status">
                            <option value="1">Hoạt động</option>
                            <option value="0">Không hoạt động</option>
                        </select>
                    </div>
                </div>
            </div>

            <!-- Footer -->
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" @onclick="update">Lưu</button>
                <button type="button" class="btn btn-secondary" @onclick="HideCreateGradeModal">Đóng</button>
            </div>
        </div>
    </div>
</div>


@code {

    private Guid? selectedGradeId1 = null;
    private Guid a;
    private bool isCreateGradeModalVisible = false;
    private bool isShowGradeModalVisible = false;
    private bool isExcelModalVisible = false;
    private bool importexcelmodal = false;
    private bool showupdatestudent = false;
    private List<GradeDTO> gradeDTOs = new List<GradeDTO>();
    private GradeDTO gradeDTO = new GradeDTO();
    private Guid selectedGradeId;
    private  ClassesDTO classesDTOs = new ClassesDTO();
    private List<Classes> classes = new List<Classes>();
    private List<Grades> grades = new List<Grades>();
    private List<GetallStudentDT0> getallStudentDT0s = new List<GetallStudentDT0>();
    private UserDTO userDTOs = new UserDTO();
    private Users user = new Users();
    private Guid? selectedClassId;
    private string teacherid;
    private IBrowserFile selectedFile;
    private IBrowserFile avatarFile;
    private async Task tokenget()
    {
        var token = await Jsruntime.InvokeAsync<string>("localStorage.getItem", "YourSuperSecretKeyHere");
        if (string.IsNullOrEmpty(token))
        {
            throw new Exception("Token không tồn tại hoặc không hợp lệ.");
        }
        var handler = new System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler();
        var jsonToken = handler.ReadToken(token) as System.IdentityModel.Tokens.Jwt.JwtSecurityToken;
        teacherid = jsonToken?.Claims.FirstOrDefault(c => c.Type == "Idteacher")?.Value;

    }
    private void HandleFileSelecteds(InputFileChangeEventArgs e)
    {
        avatarFile = e.File; // Lấy file được chọn
    }
    private async Task HandleValidSubmit(Guid id)
    {
        user.RoleId = Guid.Parse("26948BA2-17C8-4B73-BD5B-08CCA2DB0F92");
        user.IsLocked = true;
        var content = new MultipartFormDataContent();


        content.Add(new StringContent(user.FullName), "FullName");
        content.Add(new StringContent(user.Email), "Email");
        content.Add(new StringContent(user.UserName), "UserName");
        content.Add(new StringContent(user.PasswordHash), "PasswordHash");
        content.Add(new StringContent(user.PhoneNumber), "PhoneNumber");
        content.Add(new StringContent(user.IsLocked.ToString()), "IsLocked");
        content.Add(new StringContent(user.RoleId.ToString()), "RoleId");
        content.Add(new StringContent(user.Status.ToString()), "status");
        content.Add(new StringContent(user.DateOfBirth.ToString()), "dateOfBirth");

        // Thêm file avatar vào content
        if (avatarFile != null)
        {
            var stream = avatarFile.OpenReadStream(); // Giới hạn kích thước file 1MB
            var fileContent = new StreamContent(stream);
            fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(avatarFile.ContentType);
            content.Add(fileContent, "avatarFile", avatarFile.Name);
        }

        // Gửi request đến API
        var response = await client.PostAsync($"https://localhost:7046/api/User/create-user?id={id}", content);
        if (response.IsSuccessStatusCode)
        {

            user = new Users(); // Reset form
            importexcelmodal = false;
            await GetAllIDclass(id);
        }
        else
        {
            await Jsruntime.InvokeVoidAsync("alert", "thêm dữ liệu thất bại");
        }
    }


    private async Task delete(Guid id, Guid idclass)
    {
        var respon = await client.DeleteAsync($"https://localhost:7046/api/User/delete-user?id={id}");
        if (respon.IsSuccessStatusCode)
        {
            await GetAllIDclass(idclass);
        }
        else
        {
            await Jsruntime.InvokeVoidAsync("alert", "xóa thất bại");
        }
    }
    private async Task update()
    {
        var response = await client.PutAsJsonAsync("https://localhost:7046/api/User/update-user", userDTOs);
        if (response.IsSuccessStatusCode)
        {
            showupdatestudent = false;
            await GetAllIDclass(userDTOs.idclass);
        }
        else
        {
            await Jsruntime.InvokeVoidAsync("alert", "Cập nhật thất bại");
        }
    }
    private async void showupdate(Guid id)
    {
        userDTOs = await client.GetFromJsonAsync<UserDTO>($"https://localhost:7046/api/User/get-by-id-user?id={id}");
        showupdatestudent = true;
        StateHasChanged();


    }
    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.GetMultipleFiles(1); // Lấy tệp đầu tiên
        if (file.Count > 0)
        {
            selectedFile = file[0]; // Chọn tệp đầu tiên
        }
    }
    private async Task GetAllIDclass(Guid id)
    {
        getallStudentDT0s = await client.GetFromJsonAsync<List<GetallStudentDT0>>($"https://localhost:7046/api/Student/get-all-ID-class?id={id}");
    }
    private async Task UploadFile(Guid id)
    {
        if (selectedFile != null)
        {
            var stream = selectedFile.OpenReadStream(100 * 1024 * 1024); // Giới hạn 100MB
            var content = new MultipartFormDataContent();

            using (var memoryStream = new MemoryStream())
            {
                await stream.CopyToAsync(memoryStream);
                var fileBytes = memoryStream.ToArray();
                content.Add(new ByteArrayContent(fileBytes), "file", selectedFile.Name);
            }

            if (classesDTOs.Id != Guid.Empty)
            {
                content.Add(new StringContent(id.ToString()), "id");
            }
            else
            {
                await Jsruntime.InvokeVoidAsync("Swal.fire", new
                {
                    title = "Thất bại!",
                    text = "thiếu id lớp học",
                    icon = "error",
                    confirmButtonText = "OK"
                });
            }
            var response = await client.PostAsync($"https://localhost:7046/api/User/import-excel?id={classesDTOs.Id}", content);
            if (response.IsSuccessStatusCode)
            {
                await Jsruntime.InvokeVoidAsync("Swal.fire", new
                {
                    title = "Thành công!",
                    text = "Thêm đữ liệu thành công!",
                    icon = "success",
                    confirmButtonText = "OK"
                });
                await GetAllIDclass(id);
            }
            else
            {
                await Jsruntime.InvokeVoidAsync("Swal.fire", new
                {
                    title = "Thất bại!",
                    text = "Đã xảy ra lỗi khi tải lên",
                    icon = "error",
                    confirmButtonText = "OK"
                });
            }
        }
        else
        {
            await Jsruntime.InvokeVoidAsync("Swal.fire", new
            {
                title = "Thất bại!",
                text = "Vui lòng chọn một file",
                icon = "error",
                confirmButtonText = "OK"
            });
        }
    }
    private void showimportstudent()
    {
        importexcelmodal = true;
    }
    private async Task dowloadexcel()
    {
        var respon = await client.GetAsync("https://localhost:7046/api/User/export-sample");
        if (respon.IsSuccessStatusCode)
        {
            var content = await respon.Content.ReadAsByteArrayAsync();
            var base64String = Convert.ToBase64String(content);
            await Jsruntime.InvokeVoidAsync("downloadFile", $"Template_Sample_{DateTime.Now:yyyyMMddHHmmss}.xlsx", base64String);
        }
    }
    private async Task deletegrade(Guid id)
    {
        var response =await client.DeleteAsync($"https://localhost:7046/api/Grade/delete-grade?Id={id}");
        if (response.IsSuccessStatusCode)
        {
            navigation.NavigateTo(navigation.Uri, forceLoad: true);
        }
        else
        {
            await Jsruntime.InvokeVoidAsync("alert", "xóa thất bại");
        }
    }
    private async Task deleteclass(Guid id)
    {
        var response =await client.DeleteAsync($"https://localhost:7046/api/Classes/delete-class?Id={id}");
        if (response.IsSuccessStatusCode)
        {
            await LoadClasses();
            classesDTOs.Name = string.Empty;
            StateHasChanged();
        }
        else
        {
            await Jsruntime.InvokeVoidAsync("alert", "xóa thất bại");
        }
    }
    private async Task createclass(Guid id)
    {

        classesDTOs.TeacherId =Guid.Parse(teacherid);
        classesDTOs.GradeId = id;
        var respon = await client.PostAsJsonAsync("https://localhost:7046/api/Classes/create-class", classesDTOs);
        if (respon.IsSuccessStatusCode)
        {
            await LoadClasses();

        }
        else
        {
            await Jsruntime.InvokeVoidAsync("alert", "thêm thất bại");
        }
    }
    private async void OnRightClick(MouseEventArgs e, Guid classId)
    {

        classesDTOs.Id = classId; // Gán classId
    }
    private void ToggleGrade(Guid gradeID)
    {
        if (selectedGradeId1 == gradeID)
        {
            selectedGradeId1 = null;

        }
        else
        {

            selectedGradeId1 = gradeID;
        }
    }

    protected override async Task OnInitializedAsync()
    {

        var httpClient = clientFactory.CreateClient("student");
        gradeDTOs = await httpClient.GetFromJsonAsync<List<GradeDTO>>("https://localhost:7046/api/Grade/get-grade");
        StateHasChanged();
        tokenget();
        LoadClasses();

    }
    private void showexcel()
    {
        importexcelmodal = false;
        isExcelModalVisible = true;

    }
    private void ShowGradeModal(Guid id)
    {
        selectedGradeId = id;
        isShowGradeModalVisible = true;
    }

    private void HideCreateGradeModal()
    {
        showupdatestudent = false;
        importexcelmodal = false;
        isExcelModalVisible = false;
        isShowGradeModalVisible = false;
        isCreateGradeModalVisible = false;
        selectedGradeId = Guid.Empty;
    }

    private void ShowCreateGradeModal()
    {
        gradeDTO = new GradeDTO(); 
        isCreateGradeModalVisible = true;
        selectedGradeId = Guid.Empty; 
    }

    private async Task ShowUpdateGrade(Guid id)
    {
        selectedGradeId = id;

        var httpClient = clientFactory.CreateClient("student");
        gradeDTO = await httpClient.GetFromJsonAsync<GradeDTO>($"https://localhost:7046/api/Grade/get-by-id?id={id}");
        isCreateGradeModalVisible = true;
    }

    private async Task SubmitGrade()
    {
        var httpClient = clientFactory.CreateClient("student");
        HttpResponseMessage response;

        if (selectedGradeId == Guid.Empty)
        {
            // Tạo mới
            response = await httpClient.PostAsJsonAsync("https://localhost:7046/api/Grade/create-grade", gradeDTO);
        }
        else
        {
            
            gradeDTO.Id = selectedGradeId;
            response = await httpClient.PutAsJsonAsync("https://localhost:7046/api/Grade/update-grade", gradeDTO);
        }

        if (response.IsSuccessStatusCode)
        {
            isCreateGradeModalVisible = false;
            await OnInitializedAsync(); 
        }
        else
        {
            var errorMessage = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"Error: {errorMessage}");
        }
    }
    private string GetGradeName(int gradeNumber)
    {
        return $"Grade {gradeNumber}";
    }

    private async Task LoadClasses()
    {
        classes = await client.GetFromJsonAsync<List<Classes>>("https://localhost:7046/api/Classes/get-all-class");
    }
}
<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
<script>
    $(document).on('contextmenu', '.target', function (e) {
        e.preventDefault();
        $('.context-menu').hide();
        $(this).siblings('.context-menu').css({
            display: 'block',
            left: e.pageX,
            top: e.pageY
        });
    });
    $(document).on('click', function () {
        $('.context-menu').hide();
    });
    function downloadFile(fileName, base64String) {
        const link = document.createElement('a');
        link.href = 'data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64,' + base64String;
        link.download = fileName;
        link.click();
    };
</script>

