@* @using DataBase.DTOs
@using Database.DTOs
@layout AdminLayout
@page "/adminIndex"
@inject IHttpClientFactory clientFactory;
@inject HttpClient client
@inject IJSRuntime jsRuntime
@inject NavigationManager nav

<h3 class="text-center my-4">Thống kê biểu đồ</h3>
<div class="chart-container">
    <div class="chart-wrapper">
        <canvas id="studentsPieChart"></canvas>
    </div>
    <div class="chart-wrapper">
        <canvas id="classesPieChart"></canvas>
    </div>
    <div class="chart-wrapper">
        <canvas id="teachersPieChart"></canvas>
    </div>
</div>
@code {
    private List<GradeDTO> gradeData = new List<GradeDTO>();
    private bool isDataLoaded = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var httpClinet = clientFactory.CreateClient("DefaultClient");
            var url = "https://localhost:7046/api/Grade/get-grade-data";
            gradeData = await httpClinet.GetFromJsonAsync<List<GradeDTO>>(url);
            isDataLoaded = true; // Đánh dấu dữ liệu đã được tải
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading data: {ex.Message}");
            throw;
        }

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                var httpClient = clientFactory.CreateClient("DefaultClient");
                var url = "https://localhost:7046/api/Grade/get-grade-data";
                gradeData = await httpClient.GetFromJsonAsync<List<GradeDTO>>(url);
                if (gradeData != null && gradeData.Any())
                {
                    var gradeNames = new[] { 6, 7, 8, 9 };
                    var studentCounts = gradeNames.Select(name => gradeData.FirstOrDefault(d => d.Name == name)?.TotalStudents ?? 0).ToArray();
                    var classCounts = gradeNames.Select(name => gradeData.FirstOrDefault(d => d.Name == name)?.TotalClasses ?? 0).ToArray();
                    var teacherCounts = gradeNames.Select(name => gradeData.FirstOrDefault(d => d.Name == name)?.TotalTeachers ?? 0).ToArray();

                    // Vẽ biểu đồ sau khi dữ liệu đã tải xong
                    if (studentCounts.Any(c => c > 0))
                        await jsRuntime.InvokeVoidAsync("drawPieChart", "studentsPieChart", gradeNames, studentCounts, "Thống kê số lượng học sinh theo khối");

                    if (classCounts.Any(c => c > 0))
                        await jsRuntime.InvokeVoidAsync("drawPieChart", "classesPieChart", gradeNames, classCounts, "Thống kê số lượng lớp theo khối");

                    if (teacherCounts.Any(c => c > 0))
                        await jsRuntime.InvokeVoidAsync("drawPieChart", "teachersPieChart", gradeNames, teacherCounts, "Thống kê số lượng giáo viên theo khối");

                    isDataLoaded = true;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error loading data: {ex.Message}");
                throw;
            }
        }

    }
}

<div class="chart-container">
    <div class="chart-details">
        <h3>Chú thích thống kê biểu đồ</h3>

        <div class="chart-group">
            <div class="chart-group-title">Biển đồ 1: Thống kê số lượng học sinh theo khối</div>
            <ul>
                @foreach (var grade in gradeData.OrderBy(g => g.Name))
                {
                    <li>Khối @grade.Name: @grade.TotalStudents học sinh</li>
                }
            </ul>
        </div>

        <div class="chart-group">
            <div class="chart-group-title">Biển đồ 2: Thống kê số lượng lớp theo khối</div>
            <ul>
                @foreach (var grade in gradeData.OrderBy(g => g.Name))
                {
                    <li>Khối @grade.Name: @grade.TotalClasses lớp</li>
                }
            </ul>
        </div>

        <div class="chart-group">
            <div class="chart-group-title">Biển đồ 3: Thống kê số lượng giáo viên theo khối</div>
            <ul>
                @foreach (var grade in gradeData.OrderBy(g => g.Name))
                {
                    <li>Khối @grade.Name: @grade.TotalTeachers giáo viên</li>
                }
            </ul>
        </div>
    </div>

    <div class="col-md-4 border p-4">
        <h2 class="text-center mb-4">Bảng thông báo</h2>
        <button class="btn btn-primary mb-3 w-100" @onclick="ShowCreateNoticeModal">Tạo Thông Báo</button>
        <div class="notification-list-container">
            @if (notifications != null && notifications.Count > 0)
            {
                @foreach (var notification in notifications.Take(4)) @* <!-- Giới hạn hiển thị 4 thông báo --> *@
                @* {
                    <div class="card notification-card mb-2">
                        <div class="card-body">
                            <h6 class="card-title">
                                <a @onclick="() => Detail(notification.Id)" class="notification-title">
                                    <i class="bi bi-info-circle-fill text-primary"></i>
                                    @notification.Title
                                </a>
                            </h6>
                            <p class="card-text text-muted small">
                                Ngày tạo: @notification.CreationTime.ToString("dd/MM/yyyy HH:mm")
                            </p>
                        </div>
                    </div>
                }


            }
            else
            {
                <p class="text-center">Không có thông báo nào.</p>
            }
        </div>
    </div>
</div>

<div class="modal fade @(isCreateNoticeModalVisible ? "show" : "")" tabindex="-1" style="display:@(isCreateNoticeModalVisible ? "block" : "none")">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title">Tạo Thông Báo</h5>
                <button type="button" class="btn-close" @onclick="HideCreateNoticeModal"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label for="title" class="form-label">Tiêu đề thông báo:</label>
                    <input type="text" id="title" class="form-control" @bind="notificationDTO.Title" placeholder="Nhập tiêu đề" />
                </div>
                <div class="mb-3">
                    <label for="content" class="form-label">Nội dung thông báo:</label>
                    <textarea id="content" class="form-control" @bind="notificationDTO.Content" placeholder="Nhập nội dung"></textarea>
                </div>
                <div class="mb-3">
                    <label for="creationTime" class="form-label">Thời gian tạo thông báo:</label>
                    <input type="datetime-local" id="creationTime" class="form-control" @bind="notificationDTO.CreationTime" />
                </div>
                <div class="mb-3">
                    <label for="status" class="form-label">Trạng thái:</label>
                    <input type="text" id="status" class="form-control" @bind="notificationDTO.Status" placeholder="Nhập trạng thái" />
                </div>
                <div class="mb-3">
                    <label for="type" class="form-label">Loại thông báo:</label>
                    <select id="type" class="form-control" @bind="notificationDTO.type">
                        <option value="0">Thông báo cho tất cả</option>
                        <option value="1">Thông báo cho 1 hoặc nhiều lớp nhất định</option>
                    </select>
                </div>

                @if (notificationDTO.type == 1)
                {
                    <div class="mt-3">
                        <button type="button" class="btn btn-primary" @onclick="ShowClassSelectionModal">Chọn lớp</button>

                        <div class="mt-3">
                            <label>Các lớp đã chọn:</label>
                            <ul class="list-group">
                                @foreach (var className in selectedClassNames)
                                {
                                    <li class="list-group-item">@className</li>
                                }
                            </ul>
                        </div>
                    </div>
                }

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="HideCreateNoticeModal">Đóng</button>
                <button type="button" class="btn btn-primary" @onclick="SubmitNotice">Lưu Thông Báo</button>
            </div>
        </div>
    </div>
</div>
@if (isClassSelectionModalVisible)
{
    <div class="modal fade show" tabindex="-1" style="display:block;">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Chọn các lớp</h5>
                    <button type="button" class="btn-close" @onclick="HideClassSelectionModal"></button>
                </div>
                <div class="modal-body">
                    <div class="mt-3">
                        <label>Chọn lớp:</label>
                        <select multiple class="form-control" @onchange="HandleClassSelection">
                            @foreach (var item in classList)
                            {
                                <option value="@item.Id">@item.Name</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="HideClassSelectionModal">Lưu lớp đã chọn</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private bool isCreateNoticeModalVisible = false;
    private bool isClassSelectionModalVisible = false; // Biến điều khiển hiển thị modal chọn lớp
    private List<NotificationDTO>? notifications = new List<NotificationDTO>();
    private NotificationDTO notificationDTO = new NotificationDTO();
    private List<ClassesDTO> classList = new List<ClassesDTO>(); // Danh sách các lớp học
    private List<Guid> selectedClassIds = new List<Guid>(); // Danh sách ID lớp được chọn (nếu Type == 1)
    private List<string> selectedClassNames = new List<string>(); // Danh sách tên các lớp đã chọn
    private string currentDateTime = DateTime.Now.ToString("yyyy-MM-ddTHH:mm"); // Định dạng cho <input type="datetime-local">

    protected override async void OnInitialized()
    {
        LoadNotifications();
        LoadClasses();
    }
    public async void Detail(Guid Id)
    {
        nav.NavigateTo($"/notification-detail/{Id}");
    }
    private async Task LoadClasses()
    {
        // Giả sử bạn đã có API hoặc dịch vụ để lấy danh sách lớp từ database
        var httpClient = clientFactory.CreateClient("Get");
        var url = "https://localhost:7046/api/Classes/get-all-class";
        classList = await httpClient.GetFromJsonAsync<List<ClassesDTO>>(url);
    }
    // Hàm tải danh sách thông báo
    private async Task LoadNotifications()
    {
        var httpClient = clientFactory.CreateClient("Get");
        var url = "https://localhost:7046/api/Notification/get-all-notification";
        notifications = await httpClient.GetFromJsonAsync<List<NotificationDTO>>(url);
    }
    private void HandleNotificationTypeChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        var selectedValue = e.Value?.ToString();

        if (int.TryParse(selectedValue, out int type))
        {
            notificationDTO.type = type;
        }

        // Kiểm tra nếu người dùng chọn "1" (Thông báo cho một hoặc một số lớp nhất định)
        if (notificationDTO.type == 1)
        {
            ShowClassSelectionModal(); // Mở modal để chọn lớp
        }
        else
        {
            HideClassSelectionModal(); // Đóng modal nếu là thông báo cho tất cả
            selectedClassIds.Clear(); // Xóa danh sách lớp đã chọn
        }
    }

    // Xử lý khi người dùng chọn lớp
    private void HandleClassSelection(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        var selectedOptions = e.Value as IEnumerable<string>;
        selectedClassIds = selectedOptions.Select(id => Guid.Parse(id)).ToList();

        // Lấy tên các lớp đã chọn
        selectedClassNames = classList
            .Where(c => selectedClassIds.Contains(c.Id))
            .Select(c => c.Name)
            .ToList();
    }
    private void ShowCreateNoticeModal()
    {
        // Đặt thời gian hiện tại làm giá trị mặc định khi mở modal
        notificationDTO.CreationTime = DateTime.Now; // Gán ngày giờ hiện tại cho DTO
        isCreateNoticeModalVisible = true;
    }

    private async Task SubmitNotice()
    {
        // Kiểm tra nếu người dùng chọn thông báo cho lớp nhưng chưa chọn lớp nào
        if (notificationDTO.type == 1 && !selectedClassIds.Any())
        {
            await jsRuntime.InvokeVoidAsync("Swal.fire", new
            {
                title = "Lỗi",
                text = "Vui lòng chọn ít nhất một lớp để gửi thông báo!",
                icon = "error",
                confirmButtonText = "OK"
            });
            return;
        }

        // Gán danh sách ClassIds vào DTO trước khi gửi API chỉ khi type == 1
        if (notificationDTO.type == 1)
        {
            notificationDTO.ClassIds = selectedClassIds;
        }
        else
        {
            notificationDTO.ClassIds = null; // Xóa dữ liệu ClassIds khi gửi thông báo cho tất cả
        }

        // Gửi thông báo qua API
        var httpClient = clientFactory.CreateClient();
        var url = $"https://localhost:7046/api/Notification/create-notification";
        var response = await httpClient.PostAsJsonAsync(url, notificationDTO);

        if (response.IsSuccessStatusCode)
        {
            await jsRuntime.InvokeVoidAsync("Swal.fire", new
            {
                title = "Thành công!",
                text = "Thông báo đã được gửi thành công!",
                icon = "success",
                confirmButtonText = "OK"
            });

            HideCreateNoticeModal();

            // Tải lại danh sách thông báo sau khi thêm
            await LoadNotifications();
        }
        else
        {
            var errorMessage = await response.Content.ReadAsStringAsync();
            await jsRuntime.InvokeVoidAsync("Swal.fire", new
            {
                title = "Thất bại!",
                text = $"Gửi thông báo thất bại: {errorMessage}",
                icon = "error",
                confirmButtonText = "OK"
            });
        }
    }




    private void HideCreateNoticeModal()
    {
        isCreateNoticeModalVisible = false;
    }
    private void HandleClassSelection(Guid classId, bool isChecked)
    {
        if (isChecked)
        {
            selectedClassIds.Add(classId);
        }
        else
        {
            selectedClassIds.Remove(classId);
        }
    }
    private void ShowClassSelectionModal()
    {
        isClassSelectionModalVisible = true;
    }

    private void HideClassSelectionModal()
    {
        isClassSelectionModalVisible = false;
    }
}
 *@ 