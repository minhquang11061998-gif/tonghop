@page "/createUser"
@using DataBase.DTOs
@using DataBase.Models
@using global::Data.DTOs
@using System.Net.Http.Json
@layout AdminLayout
@inject HttpClient client
@inject NavigationManager navigation

<h3>Tạo tài khoản mới</h3>

<EditForm Model="@user" OnValidSubmit="@HandleValidSubmit" class="form-container">
    <DataAnnotationsValidator />
    <ValidationSummary class="validation-summary" />

    <div class="form-group">
        <label for="fullName">Họ và tên:</label>
        <InputText id="fullName" class="form-control" @bind-Value="@user.FullName" />
        <ValidationMessage For="@(() => user.FullName)" class="validation-message" />
    </div>

    <div class="form-group">
        <label for="email">Email:</label>
        <InputText id="email" class="form-control" @bind-Value="@user.Email" />
        <ValidationMessage For="@(() => user.Email)" class="validation-message" />
    </div>

    <div class="form-group">
        <label for="phoneNumber">Số điện thoại:</label>
        <InputText id="phoneNumber" class="form-control" @bind-Value="@user.PhoneNumber" />
        <ValidationMessage For="@(() => user.PhoneNumber)" class="validation-message" />
    </div>

    <div class="form-group">
        <label for="userName">Tên đăng nhập:</label>
        <InputText id="userName" class="form-control" @bind-Value="@user.UserName" />
        <ValidationMessage For="@(() => user.UserName)" class="validation-message" />
    </div>

    <div class="form-group">
        <label for="password">Mật khẩu:</label>
        <InputText id="password" type="password" class="form-control" @bind-Value="@user.PasswordHash" />
        <ValidationMessage For="@(() => user.PasswordHash)" class="validation-message" />
    </div>

    <div class="form-group">
        <label for="avatarFile">Ảnh đại diện:</label>
        <InputFile id="avatarFile" class="form-control-file" OnChange="@HandleFileSelected" />
    </div>

    <div class="form-group">
        <label for="roleId">Vai trò:</label>
        <InputSelect id="roleId" class="form-control" @bind-Value="@user.RoleId">
            <option value="">Chọn vai trò</option>
            @foreach (var role in roles)
            {
                <option value="@role.Id">@role.Name</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => user.RoleId)" class="validation-message" />
    </div>

    <button type="submit" class="btn btn-primary">Tạo thêm tài khoản</button>
</EditForm>

@if (errorMessage != null)
{
    <div class="alert alert-danger">@errorMessage</div>
}

@if (successMessage != null)
{
    <div class="alert alert-success">@successMessage</div>
}

@code {
    private Users user = new Users();
    private List<RoleDTO> roles = new List<RoleDTO>();
    private string errorMessage;
    private string successMessage;
    private IBrowserFile avatarFile;

    protected override async Task OnInitializedAsync()
    {
        // Gọi API để lấy danh sách quyền
        roles = await client.GetFromJsonAsync<List<RoleDTO>>("api/Role/get-all-role");
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        avatarFile = e.File; // Lưu avatar file
    }

    private async Task HandleValidSubmit()
    {
        var content = new MultipartFormDataContent();

        // Thêm thông tin người dùng vào content
        content.Add(new StringContent(user.FullName), "FullName");
        content.Add(new StringContent(user.Email), "Email");
        content.Add(new StringContent(user.UserName), "UserName");
        content.Add(new StringContent(user.PasswordHash), "PasswordHash");
        content.Add(new StringContent(user.PhoneNumber), "PhoneNumber");
        content.Add(new StringContent(user.RoleId.ToString()), "RoleId");

        // Thêm file avatar vào content
        if (avatarFile != null)
        {
            var stream = avatarFile.OpenReadStream(); // Giới hạn kích thước file 1MB
            var fileContent = new StreamContent(stream);
            fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(avatarFile.ContentType);
            content.Add(fileContent, "avatarFile", avatarFile.Name);
        }

        // Gửi request đến API
        var response = await client.PostAsync("api/User/create-user", content);
        if (response.IsSuccessStatusCode)
        {
            successMessage = "User added successfully!";
            errorMessage = null;
            user = new Users(); // Reset form
        }
        else
        {
            errorMessage = await response.Content.ReadAsStringAsync();
            successMessage = null;
        }
    }
}