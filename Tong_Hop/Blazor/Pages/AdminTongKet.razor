@page "/tongket"
@using DataBase.DTOs
@layout AdminLayout
@inject IHttpClientFactory clientFactory;
@inject HttpClient client
@inject IJSRuntime jsRuntime
@inject NavigationManager nav

<div class="container">
	<div class="row mt-4">
		<div class="col-md-4">
			<h4 class="section-title">Tìm kiếm</h4>
			<div class="search-container">
				<input type="text" class="form-control search-input"
					   @bind="searchKeyword"
					   placeholder="Nhập tên lớp hoặc tên giáo viên chủ nhiệm"
					   @oninput="OnSearchInputChange" />
				<button class="btn btn-primary search-btn mt-2" @onclick="SearchClass">Tìm kiếm</button>
			</div>
		</div>

		@if (showMessageBox)
		{
			<div class="message-box-overlay">
				<div class="message-box">
					<div class="message-header">
						<h2>Thông báo</h2>
						<button class="close-btn" @onclick="CloseMessageBox">&times;</button>
					</div>
					<div class="message-body">
						<p>Vui lòng nhập lại dữ liệu cần tìm.</p>
					</div>
					<div class="message-footer">
						<button class="btn btn-warning btn-bold" @onclick="CloseMessageBox">Đóng</button>
					</div>
				</div>
			</div>
		}

		<div class="col-md-8">
			<div class="row g-3">
				@if (classList != null && classList.Count > 0)
				{
					@foreach (var classInfo in classList)
					{
						<div class="col-md-6">
							<div class="card class-card" @onclick="() => LoadAndCalculateLearningSummary(classInfo.Id)">
								<div class="card-body">
									<h5 class="card-title">@classInfo.Name</h5>
									<p class="card-text">
										<span><strong>Chủ nhiệm:</strong> @classInfo.TeacherName</span><br />
										<span><strong>Trạng thái:</strong> @classInfo.Status</span><br />
										<span><strong>Tổng số học sinh:</strong> @classInfo.MaxStudent</span>
									</p>
								</div>
							</div>
						</div>
					}
				}
				else
				{
					<div class="col-12 text-center">
						<p class="no-data-text">Không có lớp nào để hiển thị.</p>
					</div>
				}
			</div>
		</div>
	</div>
</div>

<div class="modal fade" id="summaryModal" tabindex="-1" aria-labelledby="summaryModalLabel" aria-hidden="true" data-bs-backdrop="false">
	<div class="modal-dialog modal-lg modal-dialog-centered">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title" id="summaryModalLabel">📊 Tổng kết học tập</h5>
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body">
				<div class="summary-header mb-4">
					<p><strong>Lớp:</strong> <span class="highlight-text">@className</span></p>
				</div>
				<table class="table table-striped table-hover table-bordered custom-table">
					<thead>
						<tr>
							<th class="text-center">STT</th>
							<th>Học sinh</th>
							@if (Subjects != null && Subjects.Any())
							{
								@foreach (var subject in Subjects)
								{
									<th class="text-center">@subject</th>
								}
							}
						</tr>
					</thead>
					<tbody>
						@if (learningSummaryList != null && learningSummaryList.Any())
						{
							@foreach (var (studentSummary, index) in learningSummaryList.Select((item, idx) => (item, idx)))
							{
								<tr>
									<td class="text-center">@((index + 1))</td>
									<td>@studentSummary.StudentName</td>
									@foreach (var subject in Subjects)
									{
										<td class="text-center">
											@(studentSummary.SubjectScores != null &&
																		studentSummary.SubjectScores.TryGetValue(subject, out var score)
																		? score.ToString("0.00")
																		: "-")
										</td>
									}
								</tr>
							}
						}
						else
						{
							<tr>
								<td colspan="100%" class="text-center no-data">Không có dữ liệu tổng kết.</td>
							</tr>
						}
					</tbody>
				</table>
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Đóng</button>
			</div>
		</div>
	</div>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>

@code {
	private List<ClassesDTO> classList = new List<ClassesDTO>();
	private List<GradeDTO> grades = new List<GradeDTO>();
	private List<Learning_SummaryDTO> learningSummaryList = new List<Learning_SummaryDTO>();
	private List<string> Subjects = new();
	private string searchKeyword;
	private bool showMessageBox = false;
	private string IdTeacher;
	private string className;
	private bool IsModalOpen = false;
	private ClassesDTO selectedClass = null;

	protected override async Task OnInitializedAsync()
	{
		await LoadClass();
	}

	private async Task LoadClass()
	{
		try
		{
			var httpClient = clientFactory.CreateClient("DefaultClient");
			var classUrl = "https://localhost:7046/api/Classes/get-all-class";
			classList = await httpClient.GetFromJsonAsync<List<ClassesDTO>>(classUrl);

			// Lấy danh sách khối lớp
			var gradeUrl = "https://localhost:7046/api/Grade/get-grade";
			grades = await httpClient.GetFromJsonAsync<List<GradeDTO>>(gradeUrl);

			// Kết hợp dữ liệu từ hai bảng
			classList = classList
				.Join(
					grades,
					c => c.GradeId, // Khóa ngoại từ bảng Classes
					g => g.Id, // Khóa chính từ bảng Grades
					(c, g) => new ClassesDTO
						{
							Id = c.Id,
							Name = c.Name,
							TeacherName = c.TeacherName,
							Status = c.Status,
							MaxStudent = c.MaxStudent,
							GradeId = c.GradeId,
							GradeName = g.Name // Gắn thêm GradeName từ bảng Grades
						}
				)
				.OrderBy(c => c.GradeName) // Sắp xếp theo khối (6, 7, 8, 9)
				.ThenBy(c => c.Name) // Sắp xếp theo tên lớp trong từng khối
				.ToList();
		}
		catch (Exception ex)
		{
			await jsRuntime.InvokeVoidAsync("alert", $"Lỗi: {ex.Message}");
		}
	}

	public async Task SearchClass()
	{
		if (!string.IsNullOrEmpty(searchKeyword))
		{
			var encodedKeyword = Uri.EscapeDataString(searchKeyword);
			var url = $"https://localhost:7046/api/Classes/search-class?keyword={encodedKeyword}";

			try
			{
				var response = await client.GetFromJsonAsync<List<ClassesDTO>>(url);

				if (response != null && response.Count > 0)
				{
					classList = response;
					showMessageBox = false;
					return;
				}
			}
			catch (Exception ex)
			{
				await jsRuntime.InvokeVoidAsync("alert", $"Lỗi: {ex.Message}");
			}
		}

		classList.Clear();
		showMessageBox = true;
	}

	private async Task CloseMessageBox()
	{
		showMessageBox = false;
		await LoadClass();
	}
	private async Task OnSearchInputChange(ChangeEventArgs e)
	{
		searchKeyword = e.Value?.ToString();
		if (string.IsNullOrEmpty(searchKeyword))
		{
			await LoadClass();
		}
	}

	private async Task LoadAndCalculateLearningSummary(Guid classId)
	{
		try
		{
			var token = await jsRuntime.InvokeAsync<string>("localStorage.getItem", "YourSuperSecretKeyHere");
			if (string.IsNullOrEmpty(token))
			{
				await jsRuntime.InvokeVoidAsync("alert", "Không tìm thấy thông tin đăng nhập.");
				return;
			}

			var handler = new System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler();
			var jsonToken = handler.ReadToken(token) as System.IdentityModel.Tokens.Jwt.JwtSecurityToken;
			IdTeacher = jsonToken?.Claims.FirstOrDefault(c => c.Type == "Idteacher")?.Value;

			if (!Guid.TryParse(IdTeacher, out Guid teacherGuid))
			{
				await jsRuntime.InvokeVoidAsync("alert", "Không tìm thấy TeacherID.");
				return;
			}

			var response = await client.GetAsync(
				$"https://localhost:7046/api/Learning_Summary/GetLearningSummaries?classId={classId}&teacherId={teacherGuid}");

			if (response.IsSuccessStatusCode)
			{
				var result = await response.Content.ReadFromJsonAsync<List<Learning_SummaryDTO>>() ?? new List<Learning_SummaryDTO>();

				if (result.Any())
				{
					learningSummaryList = result
						.GroupBy(s => s.StudentId)
						.Select(g => new Learning_SummaryDTO
							{
								StudentId = g.Key,
								StudentName = g.First().StudentName,
								SubjectScores = g.Where(x => x.SubjectName != null)
													 .ToDictionary(x => x.SubjectName, x => x.Point_Summary)
							})
						.OrderBy(summary => summary.StudentName)
						.ToList();

					Subjects = learningSummaryList
						.SelectMany(studentSummary => studentSummary.SubjectScores.Keys)
						.Distinct()
						.ToList();
				}
				else
				{
					learningSummaryList = new List<Learning_SummaryDTO>();
					Subjects = new List<string>();
				}

				className = classList.FirstOrDefault(c => c.Id == classId)?.Name ?? "Không xác định";
				IsModalOpen = true;
				await jsRuntime.InvokeVoidAsync("bootstrapModal.show", "#summaryModal");
			}
			else
			{
				await jsRuntime.InvokeVoidAsync("alert", "Lớp này chưa có điểm tổng kết.");
			}
		}
		catch (Exception ex)
		{
			await jsRuntime.InvokeVoidAsync("alert", $"Đã xảy ra lỗi: {ex.Message}");
		}
		finally
		{
			IsModalOpen = true;
			StateHasChanged();
		}
	}

	private void CloseModal()
	{
		IsModalOpen = false;
		jsRuntime.InvokeVoidAsync("bootstrapModal.hide", "#summaryModal");
	}
}
