@page "/Exam/{CodeTest:int}"
@using DataBase.DTOs
@layout MainLayout
@inject HttpClient client
@inject IJSRuntime jsruntime

<h3>ViewExam</h3>

@if (hist == null)
{
    <p>Đang tải...</p>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <p>@errorMessage</p>
}
else
{
    <h4>Mã Bài Kiểm Tra: @hist.Code</h4>
    <p>Trạng Thái: @hist.Status</p>

    <h5>Câu Hỏi:</h5>

    @if (hist.Questions != null && hist.Questions.Any())
    {
        var currentQuestion = hist.Questions[currentQuestionIndex];
        <div>
            <strong>@currentQuestion.QuestionName</strong>
            @if (currentQuestion.Answers != null && currentQuestion.Answers.Any())
            {
                <ul>
                    @foreach (var answer in currentQuestion.Answers)
                    {
                        <input type="radio"
                               name="answer_@currentQuestion.QuestionId"
                               value="@answer.AnswerId"
                               @onchange="(e) => UpdateSelectedAnswer(currentQuestion.QuestionId, answer.AnswerId)"
                               checked="@(selectedAnswerIds.ContainsKey(currentQuestion.QuestionId) && selectedAnswerIds[currentQuestion.QuestionId] == answer.AnswerId)" />
                        @answer.AnswerText
                    }
                    @if (selectedAnswerIds.ContainsKey(currentQuestion.QuestionId))
                    {
                        <p>
                            Đáp án đã chọn cho câu hỏi @currentQuestion.QuestionId:
                            @selectedAnswerIds[currentQuestion.QuestionId]
                            <h1>@Id_dap_an_duoc_tron</h1>
                        </p>
                    }
                </ul>
            }
            else
            {
                <p>Không có đáp án cho câu hỏi này.</p>
            }
        </div>

        <div>
            <button @onclick="PreviousQuestion" disabled="@(!CanGoBack)">Lùi</button>
            <button @onclick="NextQuestion" disabled="@(!Id_dap_an_duoc_tron.HasValue)">Tiến</button>
        </div>
    }
    else
    {
        <p>Không có câu hỏi nào được tìm thấy.</p>
    }
}

@code {
    [Parameter]
    public int CodeTest { get; set; }
    private HistDTO hist;
    private string isdtudent;
    private bool isLoading = true;
    private string errorMessage = null;
    private int currentQuestionIndex = 0;
    private Exam_Room_Histories_DTO examhistories = new Exam_Room_Histories_DTO();
    // Lưu trữ ID của các câu trả lời đã chọn cho mỗi câu hỏi
    private Dictionary<Guid, Guid?> selectedAnswerIds = new Dictionary<Guid, Guid?>();
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isLoading = true;
            try
            {
                await TokenId();

            }
            finally
            {
                isLoading = false;
            }
        }
        
    }
    
    private async Task TokenId()
    {
        var token = await jsruntime.InvokeAsync<string>("localStorage.getItem", "YourSuperSecretKeyHere");
        if (string.IsNullOrEmpty(token))
        {
            throw new Exception("Token không tồn tại hoặc không hợp lệ.");
        }
        var handler = new System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler();
        var jsonToken = handler.ReadToken(token) as System.IdentityModel.Tokens.Jwt.JwtSecurityToken;
        isdtudent = jsonToken?.Claims.FirstOrDefault(c => c.Type == "Idstudent")?.Value;
       
    }

    private Guid? Id_dap_an_duoc_tron;

    private void UpdateSelectedAnswer(Guid questionId, Guid answerId)
    {
        // Cập nhật giá trị đã chọn cho câu hỏi
        selectedAnswerIds[questionId] = answerId;
        Id_dap_an_duoc_tron = answerId;
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadTestResultAsync();

    }

    private async Task LoadTestResultAsync()
    {
        try
        {
            isLoading = true;
            hist = await client.GetFromJsonAsync<HistDTO>($"api/ViewExam/test-testcode-question-await?CodeTest={CodeTest}");
        }
        catch (Exception ex)
        {
            errorMessage = $"Lỗi khi tải dữ liệu: {ex.Message}";
            hist = null;
        }
        finally
        {
            isLoading = false;
        }
    }


    private async Task CreateHist(int codetest, Guid idAnswer)
    {
        try
        {
            examhistories.TestQuestionAnswerId = idAnswer; // Gán giá trị ID của đáp án
            examhistories.Id = Guid.NewGuid(); // Tạo ID duy nhất cho lịch sử

            var response = await client.PostAsJsonAsync($"api/ViewExam/create-hist?CodeTesst={codetest}&GuidId={isdtudent}&answerId={idAnswer}", examhistories);

            if (!response.IsSuccessStatusCode)
            {
                var error = await response.Content.ReadAsStringAsync();
                await jsruntime.InvokeVoidAsync("alert", $"Lỗi lưu dữ liệu: {error}");
            }
        }
        catch (Exception ex)
        {
            await jsruntime.InvokeVoidAsync("alert", $"Lỗi hệ thống: {ex.Message}");
        }
    }


    
    private async Task NextQuestion()
    {
        if (CanGoNext)
        {
            if (Id_dap_an_duoc_tron.HasValue)
            {
                await CreateHist(CodeTest, Id_dap_an_duoc_tron.Value); // Lưu lịch sử câu trả lời
                currentQuestionIndex++; // Chuyển sang câu tiếp theo
                Id_dap_an_duoc_tron = null; // Reset đáp án đã chọn
            }
            else
            {
                await jsruntime.InvokeVoidAsync("alert", "Vui lòng chọn đáp án trước khi tiếp tục!");
            }
        }
    }
    private void PreviousQuestion()
    {
        if (CanGoBack)
        {
            currentQuestionIndex--;

            // Nếu câu hỏi trước đó đã được chọn đáp án, khôi phục lại giá trị
            var questionId = hist.Questions[currentQuestionIndex].QuestionId;
            if (selectedAnswerIds.ContainsKey(questionId))
            {
                Id_dap_an_duoc_tron = selectedAnswerIds[questionId];
            }
            else
            {
                Id_dap_an_duoc_tron = null;
            }
        }
    }



    private bool CanGoNext => currentQuestionIndex < (hist?.Questions?.Count ?? 0) - 1;
    private bool CanGoBack => currentQuestionIndex > 0;
}
