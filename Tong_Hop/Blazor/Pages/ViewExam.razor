@page "/Exam/{CodeTest:int}"
@using DataBase.DTOs
@inject HttpClient client
@inject IJSRuntime jsruntime
@layout LayoutNone


@if (hist == null)
{
    <div class="text-center">
        <p>Đang tải...</p>
    </div>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger text-center">
        <p>@errorMessage</p>
    </div>
}
else
{
    <div class="card  mb-3">
        <div class="card-body">
            @foreach (var item in infomationDTOs)
            {
                <div class="row align-items-center mb-4">
                    <div class="col-3">
                        <img style="height: 100px; width: auto;" src="img/Rectangle89.png" alt="Alternate Text" class="img-thumbnail" />
                    </div>
                    <div class="col-4">
                      
                        <p class="mb-1">
                            <strong>Môn Thi:</strong> @item.Namesubject
                        </p>
                        <p class="mb-1">
                            <strong>Mã môn:</strong> @item.codesubject
                        </p>
                        <p class="mb-0">
                            <strong>Thời gian:</strong> @item.timeexam phút
                        </p>
                    </div>
                    <div class="col-4">
                      
                        <p class="mb-1">
                            <strong>Họ và tên:</strong> @item.namestudent
                        </p>
                        <p class="mb-1">
                            <strong>Mã học sinh:</strong> @item.codestudent
                        </p>
                        <p class="mb-0">
                            <strong>Email:</strong> @item.email
                        </p>
                    </div>
                </div>
            }
        </div>
    </div>

    <div class="card shadow-sm">
        <div class="card-header">
            <h4 class="card-title">Mã Bài Kiểm Tra: <span class="text-primary">@hist.Code</span></h4>
            <p class="card-text">Trạng Thái: <span class="badge bg-info">@hist.Status</span></p>
            <h5 class="card-title">Câu Hỏi</h5>
        </div>
        <div class="card-body">
            @if (hist.Questions != null && hist.Questions.Any())
            {
                var currentQuestion = hist.Questions[currentQuestionIndex];
                <div class="mb-4">
                    <strong class="d-block mb-2">@currentQuestion.QuestionName</strong>
                    @if (currentQuestion.Answers != null && currentQuestion.Answers.Any())
                    {
                        <ul class="list-group">
                            @foreach (var answer in currentQuestion.Answers)
                            {
                                <li class="list-group-item">
                                    <div class="form-check">
                                        <input type="radio"
                                               class="form-check-input"
                                               id="answer_@answer.AnswerId"
                                               name="answer_@currentQuestion.QuestionId"
                                               value="@answer.AnswerId"
                                               @onchange="(e) => UpdateSelectedAnswer(currentQuestion.QuestionId, answer.AnswerId)"
                                               checked="@(selectedAnswerIds.ContainsKey(currentQuestion.QuestionId) && selectedAnswerIds[currentQuestion.QuestionId] == answer.AnswerId)" />
                                        <label class="form-check-label" for="answer_@answer.AnswerId">
                                            @answer.AnswerText
                                        </label>
                                    </div>
                                </li>
                            }
                        </ul>
                        @if (selectedAnswerIds.ContainsKey(currentQuestion.QuestionId))
                        {
                            <p class="mt-3 text-success">
                                <strong>Đáp án đã chọn:</strong> @selectedAnswerIds[currentQuestion.QuestionId] <span>@Id_cau_hoi_duoc_tron</span> 
                            </p>
                        }
                    }
                    else
                    {
                        <p class="text-warning">Không có đáp án cho câu hỏi này.</p>
                    }
                </div>
                <div class="d-flex justify-content-between">
                    <button class="btn btn-secondary" @onclick="PreviousQuestion" disabled="@(!CanGoBack)">Lùi</button>
                    <button class="btn btn-primary" @onclick="NextQuestion" disabled="@(!Id_dap_an_duoc_tron.HasValue)">Tiến</button>
                </div>
            }
            else
            {
                <p class="text-danger">Không có câu hỏi nào được tìm thấy.</p>
            }
        </div>
    </div>
}

@code {
    [Parameter]
    public int CodeTest { get; set; }
    private HistDTO hist;
    private string isdtudent;
    private bool isLoading = true;
    private string errorMessage = null;
    private int currentQuestionIndex = 0;
    private Exam_Room_Histories_DTO examhistories = new Exam_Room_Histories_DTO();
    private List<infomationDTO> infomationDTOs = new List<infomationDTO>();
    // Lưu trữ ID của các câu trả lời đã chọn cho mỗi câu hỏi
    private Dictionary<Guid, Guid?> selectedAnswerIds = new Dictionary<Guid, Guid?>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isLoading = true;
            try
            {
                await TokenId();
            }
            finally
            {
                isLoading = false;
            }
        }

    }

    private async Task TokenId()
    {
        var token = await jsruntime.InvokeAsync<string>("localStorage.getItem", "YourSuperSecretKeyHere");
        if (string.IsNullOrEmpty(token))
        {
            throw new Exception("Token không tồn tại hoặc không hợp lệ.");
        }
        var handler = new System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler();
        var jsonToken = handler.ReadToken(token) as System.IdentityModel.Tokens.Jwt.JwtSecurityToken;
        isdtudent = jsonToken?.Claims.FirstOrDefault(c => c.Type == "Idstudent")?.Value;

    }

    private Guid? Id_dap_an_duoc_tron;
    private Guid? Id_cau_hoi_duoc_tron;

    private void UpdateSelectedAnswer(Guid questionId, Guid answerId)
    {
        // Cập nhật giá trị đã chọn cho câu hỏi
        selectedAnswerIds[questionId] = answerId;
        Id_dap_an_duoc_tron = answerId;
        Id_cau_hoi_duoc_tron = questionId;
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadTestResultAsync();

    }

    private async Task LoadTestResultAsync()
    {
        try
        {
            isLoading = true;
            hist = await client.GetFromJsonAsync<HistDTO>($"api/ViewExam/test-testcode-question-await?CodeTest={CodeTest}");
            infomationDTOs = await client.GetFromJsonAsync<List<infomationDTO>>($"https://localhost:7046/api/ViewExam/information_exam?code={CodeTest}&id={isdtudent}");
        }
        catch (Exception ex)
        {
            errorMessage = $"Lỗi khi tải dữ liệu: {ex.Message}";
            hist = null;
        }
        finally
        {
            isLoading = false;
        }
    }


    private async Task CreateHist(int codetest, Guid idAnswer)
    {
        try
        {
            examhistories.TestQuestionAnswerId = idAnswer; // Gán giá trị ID của đáp án
            examhistories.Id = Guid.NewGuid(); // Tạo ID duy nhất cho lịch sử

            var response = await client.PostAsJsonAsync($"api/ViewExam/create-hist?CodeTesst={codetest}&GuidId={isdtudent}&answerId={idAnswer}", examhistories);

            if (!response.IsSuccessStatusCode)
            {
                var error = await response.Content.ReadAsStringAsync();
                await jsruntime.InvokeVoidAsync("alert", $"Lỗi lưu dữ liệu: {error}");
            }
        }
        catch (Exception ex)
        {
            await jsruntime.InvokeVoidAsync("alert", $"Lỗi hệ thống: {ex.Message}");
        }
    }

    private async Task DeleteHisst( int codetest, Guid idquest)
    {
        var res = await client.DeleteAsync($"api/ViewExam/Delete_hist?Cotesst={codetest}&IDQuestion={idquest}&IDStudent={isdtudent}");

        if (!res.IsSuccessStatusCode)
        {
            var error = await res.Content.ReadAsStringAsync();
            await jsruntime.InvokeVoidAsync("alert", $"Lỗi xóa dữ liệu: {error}");
        }
    }

    private async Task NextQuestion()
    {
        if (CanGoNext)
        {
            if (Id_dap_an_duoc_tron == null)
            {
                // Nếu không chọn đáp án, chuyển sang câu tiếp theo
                currentQuestionIndex++;
            }
            else
            {
                // Kiểm tra xem câu hỏi này đã có 2 đáp án lưu chưa
                var answerHistoryCount = await CheckAnswerHistory(CodeTest, Id_cau_hoi_duoc_tron.Value, isdtudent);

                if (answerHistoryCount >= 2)
                {
                    // Nếu câu hỏi đã có 2 đáp án, xóa và lưu lại đáp án mới
                    await DeleteHisst(CodeTest, Id_cau_hoi_duoc_tron.Value);
                    await CreateHist(CodeTest, Id_dap_an_duoc_tron.Value);
                }
                else
                {
                    // Nếu chưa có 2 đáp án, chỉ cần lưu đáp án mới
                    await CreateHist(CodeTest, Id_dap_an_duoc_tron.Value);
                }

                // Chuyển sang câu tiếp theo
                currentQuestionIndex++;
                Id_dap_an_duoc_tron = null; // Reset đáp án đã chọn
            }
        }
        else
        {
            await jsruntime.InvokeVoidAsync("alert", "Vui lòng chọn đáp án trước khi tiếp tục!");
        }
    }

    // Hàm kiểm tra xem câu hỏi đã có bao nhiêu đáp án được lưu cho sinh viên
    private async Task<int> CheckAnswerHistory(int codetest, Guid questionId, string studentId)
    {
        var response = await client.GetAsync($"api/ViewExam/check-answer-history?codetest={codetest}&questionId={questionId}&studentId={studentId}");

        if (response.IsSuccessStatusCode)
        {
            // Sử dụng ReadFromJsonAsync để đọc dữ liệu JSON và chuyển thành kiểu int
            var answerHistoryCount = await response.Content.ReadFromJsonAsync<int>();
            return answerHistoryCount;
        }
        else
        {
            await jsruntime.InvokeVoidAsync("alert", "Lỗi khi kiểm tra lịch sử trả lời");
            return 0;
        }
    }

    private void PreviousQuestion()
    {
        if (CanGoBack)
        {
            currentQuestionIndex--;

            // Nếu câu hỏi trước đó đã được chọn đáp án, khôi phục lại giá trị
            var questionId = hist.Questions[currentQuestionIndex].QuestionId;
            if (selectedAnswerIds.ContainsKey(questionId))
            {
                Id_dap_an_duoc_tron = selectedAnswerIds[questionId];
            }
            else
            {
                Id_dap_an_duoc_tron = null;
            }
        }
    }
    private bool CanGoNext => currentQuestionIndex < (hist?.Questions?.Count ?? 0) - 1;
    private bool CanGoBack => currentQuestionIndex > 0;
}
