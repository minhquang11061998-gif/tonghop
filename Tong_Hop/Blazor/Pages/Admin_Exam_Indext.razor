@page "/exam-room"
@using System.Text.Json
@using Blazor.Data
@using DataBase.DTOs
@using global::Data.DTOs
@using System.Net.Http.Json
@layout AdminLayout
@inject HttpClient client
@inject IHttpClientFactory clientFactory
@inject IJSRuntime Jsruntime
@inject NavigationManager navigate


<div class="container-fluid mt-3">
    <!-- Header Section -->
    <div class="d-flex justify-content-between align-items-center border-bottom pb-3 mb-3">
        <div>
            <button class="btn btn-primary me-2" @onclick="OpenCreateExamModal">
                <i class="bi bi-plus-circle"></i> Tạo ca thi
            </button>
            <button class="btn btn-warning me-2">
                <i class="bi bi-pencil"></i> Chỉnh sửa
            </button>
            <button class="btn btn-danger">
                <i class="bi bi-trash"></i> Xóa
            </button>
        </div>
    </div>

    <!-- Folder Structure -->
    <div class="border rounded shadow-sm p-3">
        <!-- Rooms Table -->
        <div class="table-responsive">
            <table class="table table-hover table-bordered align-middle">
                <thead class="table-primary text-center">
                    <tr>
                        <th style="width: 50px;">
                            <input type="checkbox" @onchange="ToggleSelectAll" title="Chọn tất cả">
                        </th>
                        <th>Tên bài thi</th>
                        <th>Mã vào thi</th>
                        <th>Phòng thi</th>
                        <th>Môn</th>
                        <th>Thời gian bắt đầu</th>
                        <th>Thời gian kết thúc</th>
                        <th>Giáo viên coi thi 1</th>
                        <th>Giáo viên coi thi 2</th>
                        <th>Trạng thái</th>
                        <th style="width: 150px;">Hành động</th>
                    </tr>
                </thead>
                <tbody>
                    @if (filteredExamRooms.Any())
                    {
                        @foreach (var examroom in filteredExamRooms)
                        {
                            <tr class="@(selectedRoomExamId == examroom.Id ? "table-info" : "")">
                                <td class="text-center">
                                    <input type="checkbox"
                                    checked="@(selectedRoomExamId == examroom.Id)"
                                    @onchange="() => SelectExamRoom(examroom.Id)"
                                    title="Chọn phòng thi này">
                                </td>
                                <td>@examroom.Name</td>
                                <td>@examroom.CodeTest</td>
                                <td>@examroom.Nameroom</td>
                                <td>@examroom.NameSubject</td>
                                <td>@examroom.StartTime.ToString(" HH:mm")</td>
                                <td>@examroom.EndTime.ToString("HH:mm")</td>
                                <td>@examroom.NameTeacher1</td>
                                <td>@examroom.NameTeacher2</td>
                                <td class="text-center">
                                    <span class="badge @(examroom.Status == 1 ? "bg-success" : "bg-secondary")">
                                        @examroom.Status
                                    </span>
                                </td>
                                <td class="text-center">
                                    <button class="btn btn-info btn-sm" @onclick="() => OpenDetailExamModal(examroom.IdTest)" title="Xem chi tiết">
                                        <i class="bi bi-eye"></i> Xem
                                    </button>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="11" class="text-center text-muted">Không tìm thấy phòng thi nào</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>


</div>


<!-- Modal for Creating Exam Session -->
<div class="modal fade @(isCreateExamModalVisible ? "show" : "")" tabindex="-1" style="display:@(isCreateExamModalVisible ? "block" : "none");">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Tạo ca thi</h5>
                <button type="button" class="btn-close" @onclick="CloseCreateExamModal"></button>
            </div>
            <div class="modal-body">
                <!-- Phần chọn bài thi -->
                <div class="form-group">
                    <label for="idtest">Chọn bài thi:</label>
                    <select class="form-select" @bind="idtest">
                        <option value="@Guid.Empty">Chọn bài thi</option>
                        @foreach (var item in testList)
                        {
                            <option value="@item.Id">@item.Name</option>
                        }
                    </select>
                </div>

                <!-- Chia hai hàng với tỷ lệ 4-3 -->
                <div class="row mt-3">
                    <!-- Cột 1: 4 cột -->
                    <div class="col-md-4">
                        <div class="form-group">
                            <label for="easyCount">Số câu dễ:</label>
                            <input type="number" id="easyCount" @bind="easyCount" min="0" class="form-control" />
                        </div>
                        <div class="form-group">
                            <label for="mediumCount" class="mt-2">Số câu trung bình:</label>
                            <input type="number" id="mediumCount" @bind="mediumCount" min="0" class="form-control" />
                        </div>
                        <div class="form-group">
                            <label for="hardCount" class="mt-2">Số câu khó:</label>
                            <input type="number" id="hardCount" @bind="hardCount" min="0" class="form-control" />
                        </div>
                    </div>

                    <!-- Cột 2: 3 cột -->
                    <div class="col-md-3">
                        <div class="form-group">
                            <label for="veryHardCount" class="mt-2">Số câu nâng cao:</label>
                            <input type="number" id="veryHardCount" @bind="veryHardCount" min="0" class="form-control" />
                        </div>
                    </div>

                    <!-- Cột 3: 3 cột -->
                    <div class="col-md-3">
                        <div class="form-group">
                            <label for="start" class="mt-2">Thời gian bắt đầu:</label>
                            <input type="time" id="start"   @bind="start" class="form-control" />
                        </div>
                        <div class="form-group">
                            <label for="end" class="mt-2">Thời gian kết thúc:</label>
                            <input type="time" id="end"  @bind="end" class="form-control" />
                        </div>
                    </div>
                </div>

                <!-- Nút tạo ca thi -->

            </div>
            <div class="modal-footer">
                <div class="form-group mt-3">
                    <button class="btn btn-primary w-100" @onclick="CreateExam">Tạo ca thi</button>
                </div>
            </div>
        </div>
    </div>
</div>


<!-- Modal for Viewing Details -->
<div class="modal fade @(isDetailModalVisible ? "show" : "")" tabindex="-1" style="display:@(isDetailModalVisible ? "block" : "none");">
    <div class="modal-dialog modal-lg modal-dialog-centered" style="width:1000px">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title">Chi tiết bài thi</h5>
                <button type="button" class="btn-close text-white" @onclick="CloseDtailExamModal"></button>
            </div>
            <div class="modal-body">
                <div class="overflow-auto p-4 bg-light rounded shadow-lg" style="max-height: 80vh; border: 1px solid #ddd;">
                    @foreach (var item in detailDTOs)
                    {
                        <div class="mb-4">
                            <br />
                            <h4 class="text-primary text-center fw-bold">Đề số: @(detailDTOs.IndexOf(item) + 1)</h4>
                            <h5 class="text-info">Mã đề thi: <span class="fw-bold">@item.CodeTescode</span></h5>
                            <hr class="my-3" />
                            <div class="content">
                                @foreach (var question in item.NameQuestion)
                                {
                                    <div class="mb-3">
                                      
                                        <h6 class="text-secondary">Câu @(item.NameQuestion.IndexOf(question) + 1): <span class="fw-bold">@question.QuestionName</span></h6>
                                        <ol class="list-group" style="list-style-type: upper-alpha;">
                                            @if (question.Type == 1 || question.Type == 2)
                                            {
                                                int index = 0; // Biến để đếm số thứ tự đáp án
                                                foreach (var answer in question.Answers)
                                                {
                                                    <li class="list-group-item list-group-item-light">
                                                        <strong>@((char)('A' + index))</strong>. @answer.Answer
                                                    </li>
                                                    index++;
                                                }
                                            }
                                            else if (question.Type == 3)
                                            {
                                                <li class="list-group-item list-group-item-light"><strong>A</strong>. Đúng</li>
                                                <li class="list-group-item list-group-item-light"><strong>B</strong>. Sai</li>
                                            }
                                            else if (question.Type == 4)
                                            {
                                                int index = 0; // Biến để đếm số thứ tự đáp án
                                                foreach (var answer in question.Answers)
                                                {
                                                    <li class="list-group-item list-group-item-light">
                                                        <strong>@((char)('A' + index))</strong>. <strong>Đáp án:</strong> @answer.Answer
                                                    </li>
                                                    index++;
                                                }
                                            }
                                        </ol>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                </div>
            </div>

            <div class="modal-footer">
                <button class="btn btn-secondary" @onclick="CloseDtailExamModal">Đóng</button>
            </div>
        </div>
    </div>
</div>

@code {
    private string searchRoom { get; set; } = string.Empty;
    private int CurrentPage { get; set; } = 1;
    private int ItemsPerPage { get; set; } = 5;
    private Guid selectedRoomExamId;
    private bool isExamRoomModalVisible = false;
    private GetAllExamCaThiDTO ExamroomDTO = new GetAllExamCaThiDTO();
    private List<GetAllExamCaThiDTO> ListExamroomDTOs = new List<GetAllExamCaThiDTO>();
    // Các biến và danh sách cần thiết
    private List<DetailDTO> detailDTOs = new List<DetailDTO>();
    private List<TestQuestion_TestQuestionAnswersDTO> selectedQuestions = new List<TestQuestion_TestQuestionAnswersDTO>();
    private List<TestDTO> testList = new List<TestDTO>();
    private TestDTO TestDTO = new TestDTO();
    private Guid? selectedTestId = null;
    private bool isLoading = false;
    private Guid idtest;
    private int? easyCount;
    private int? mediumCount;
    private int? hardCount;
    private int? veryHardCount;
    private DateTime start;
    private DateTime end;

    private IEnumerable<GetAllExamCaThiDTO> filteredExamRooms => ListExamroomDTOs
       .Where(r => string.IsNullOrEmpty(searchRoom) || r.Name.Contains(searchRoom, StringComparison.OrdinalIgnoreCase))
       .Skip((CurrentPage - 1) * ItemsPerPage)
       .Take(ItemsPerPage);

    private int TotalPages => (int)Math.Ceiling((double)filteredExamRooms.Count() / ItemsPerPage);
    private bool CanGoPrevious => CurrentPage > 1;
    private bool CanGoNext => CurrentPage < TotalPages;
    private bool isCreateExamModalVisible = false;
    private bool isDetailModalVisible = false;

    private async Task CreateExam()
    {
        isLoading = true; // Bắt đầu tải
        try
        {

            var a=  start.ToString(@"HH:mm");
            var b=  end.ToString(@"HH:mm");
            if(a==b){
                await Jsruntime.InvokeVoidAsync("alert", $"Thời gian kết thúc không được trùng với thời gian bắt đầu");
                return;
            }
            var response = await client.PostAsJsonAsync($"https://localhost:7046/api/TestQuestion/randomize-questions-for-test-codes?testId={idtest}&easyCount={easyCount}&mediumCount={mediumCount}&hardCount={hardCount}&veryHardCount={veryHardCount}&start={a}&end={b}", selectedQuestions);

            if (response.IsSuccessStatusCode)
            {
                await ShowSuccessMessage("Thêm dữ liệu thành công!");

                // Tải lại chi tiết bài thi sau khi thêm thành công
                await LoadDetailTest(idtest);

            }
            else
            {
                await ShowErrorMessage($"Có lỗi xảy ra. Mã lỗi: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            await ShowErrorMessage($"Có lỗi xảy ra: {ex.Message}");
        }
        finally
        {
            isLoading = false; // Kết thúc tải
        }
    }

    // Các phương thức khác vẫn giữ nguyên như bạn đã viết
    protected override async Task OnInitializedAsync()
    {
        await LoadExamRooms();
        await LoadTestList();
    }

    private async Task LoadExamRooms()
    {
        ListExamroomDTOs = await client.GetFromJsonAsync<List<GetAllExamCaThiDTO>>("https://localhost:7046/api/Exam/get-all-exam-cathi");
    }

    private async Task LoadTestList()
    {
        var client = clientFactory.CreateClient("Get");
        var url = "https://localhost:7046/api/Test/get-all-test-CATHI";
        testList = await client.GetFromJsonAsync<List<TestDTO>>(url);
    }

    private async Task LoadDetailTest(Guid id)
    {
        var client = clientFactory.CreateClient("Get");
        var url = $"https://localhost:7046/api/TestQuestion/Get-testcodes-by-testid?testId={id}";
        detailDTOs = await client.GetFromJsonAsync<List<DetailDTO>>(url);
    }

    private void ToggleTest(Guid id)
    {
        selectedTestId = selectedTestId == id ? null : id;
    }

    private void PreviousPage()
    {
        if (CanGoPrevious)
        {
            CurrentPage--;
        }
    }

    private void NextPage()
    {
        if (CanGoNext)
        {
            CurrentPage++;
        }
    }

    private void ToggleSelectAll(ChangeEventArgs e)
    {
        var isChecked = (bool)e.Value;
        selectedRoomExamId = isChecked ? ListExamroomDTOs.FirstOrDefault()?.Id ?? Guid.Empty : Guid.Empty;
    }

    private void SelectExamRoom(Guid roomId)
    {
        selectedRoomExamId = selectedRoomExamId == roomId ? Guid.Empty : roomId;
    }


    private async Task ShowSuccessMessage(string message)
    {
        await Jsruntime.InvokeVoidAsync("Swal.fire", new
        {
            title = "Thành công!",
            text = message,
            icon = "success",
            confirmButtonText = "OK"
        });
    }

    private async Task ShowErrorMessage(string message)
    {
        await Jsruntime.InvokeVoidAsync("Swal.fire", new
        {
            title = "Thất bại!",
            text = message,
            icon = "error",
            confirmButtonText = "OK"
        });
    }

    private void OpenCreateExamModal()
    {
        isCreateExamModalVisible = true;
    }
    private void CloseCreateExamModal()
    {
        isCreateExamModalVisible = false;
    }
    private async Task OpenDetailExamModal(Guid id)
    {
        await LoadDetailTest(id);
        id = idtest;
        isDetailModalVisible = true;
    }
    private void CloseDtailExamModal()
    {
        isDetailModalVisible = false;
    }
}

