@page "/teacher"
@layout AdminLayout
@using DataBase.DTOs
@inject HttpClient client
@inject IJSRuntime jsruntime

<div class="container-fluid mt-3">

    <div class="d-flex  shadow-sm">
        <div class="d-flex flex-wrap gap-2">
            <button class="btn btn-primary btn-sm" @onclick="AddOrder" disabled="@(SelectedOrder != Guid.Empty)">
                <i class="bi bi-plus-circle"></i> Tạo mới
            </button>
            <button class="btn btn-warning btn-sm" @onclick="EditOrder" disabled="@(SelectedOrder == Guid.Empty)">
                <i class="bi bi-pencil-square"></i> Chỉnh sửa
            </button>
            <button class="btn btn-danger btn-sm" @onclick="DeleteOrder" disabled="@(SelectedOrder == Guid.Empty)">
                <i class="bi bi-trash"></i> Xóa
            </button>
            <button class="btn btn-success btn-sm" @onclick="showexcel">
                <i class="bi bi-file-earmark-excel"></i> Thêm file Excel
            </button>
            <button class="btn btn-success btn-sm" @onclick="dowloadexcel">
                <i class="bi bi-file-earmark-excel"></i> Tải file mẫu Excel
            </button>
        </div>

        <div class="ms-auto" style="width: 250px;">
            <div class="input-group">
                <input type="text" placeholder="Tìm kiếm..." class="form-control border" @bind="SearchText" />
                <span class="input-group-text bg-light border">
                    <i class="bi bi-search text-muted"></i>
                </span>
            </div>
        </div>
    </div>

    <!-- Table -->
    <div class="table-responsive border rounded shadow-sm" style="background-color: #ffffff;max-height: 800px; border: 1px solid #ddd; border-radius: 5px;">
        <table class="table table-hover  table-sm align-middle text-center" style="">
           
            <thead class="table-primary border" style="height:45px">
                <tr>
                    <th style="width: 50px;">
                        <input type="checkbox" @onchange="ToggleSelectAll" title="Chọn tất cả" />
                    </th>
                    <th style="width: 80px;">Ảnh</th>
                    <th style="width: 150px;">Họ và tên</th>
                    <th style="width: 200px;">Email</th>
                    <th style="width: 120px;">Ngày sinh</th>
                    <th style="width: 150px;">Số điện thoại</th>
                    <th style="width: 150px;">Tài khoản</th>
                    <th style="width: 150px;">Mật khẩu</th>
                    <th style="width: 120px;">Trạng thái</th>
                </tr>
            </thead>
            <tbody >
                @if (FilteredOrders.Any())
                {
                    @foreach (var order in FilteredOrders)
                    {
                        <tr class="@(SelectedOrder == order.Id ? "table-primary" : "")"
                        style="cursor: pointer;"
                        @onclick="() => SelectOrder(order.Id)">
                            <td>
                                <input type="checkbox"
                                checked="@(SelectedOrder == order.Id)"
                                @onchange="() => SelectOrder(order.Id)"
                                title="Chọn tài khoản này" />
                            </td>
                            <td>
                                <img src="@order.Avartar" alt="Avatar"
                                class="img-thumbnail rounded-circle"
                                style="width: 40px; height: 40px;" />
                            </td>
                            <td>@order.FullName</td>
                            <td>@order.Email</td>
                            <td>@order.DateOfBirth?.ToString("d")</td>
                            <td>@order.PhoneNumber</td>
                            <td>@order.UserName</td>
                            <td>@order.PasswordHash</td>
                            <td>
                                <span class="badge @(order.Status == 1 ? "bg-success" : "bg-secondary")">
                                    @(order.Status == 1 ? "Hoạt động" : "Tạm dừng")
                                </span>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="9" class="text-muted text-center">Không tìm thấy giáo viên.</td>
                    </tr>
                }

            </tbody>
        </table>
    </div>



</div>


<!-- Modal for Add/Edit Order -->
@if (ShowModal)
{
    <div class="modal show d-block" style="background-color: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@((SelectedOrder == Guid.Empty ? "Thêm Tài Khoản" : "Chỉnh Sửa Tài Khoản"))</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form>
                        <div class="row g-3">
                            <div class="col-md-6">
                                <label class="form-label">Họ và Tên</label>
                                <input type="text" class="form-control" placeholder="Nhập họ và tên" @bind="usercreate.FullName" />
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">Email</label>
                                <input type="email" class="form-control" placeholder="Nhập email" @bind="usercreate.Email" />
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">Số điện thoại</label>
                                <input type="text" class="form-control" placeholder="Nhập số điện thoại" @bind="usercreate.PhoneNumber" />
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">Tên Đăng Nhập</label>
                                <input type="text" class="form-control" placeholder="Nhập tên đăng nhập" @bind="usercreate.UserName" />
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">Mật Khẩu</label>
                                <input type="password" class="form-control" placeholder="Nhập mật khẩu" @bind="usercreate.PasswordHash" />
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">Ngày Sinh</label>
                                <input type="date" class="form-control" @bind="usercreate.DateOfBirth" />
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">Hình Ảnh</label>
                                <div class="d-flex align-items-center">
                                    <div class="me-2">
                                        <InputFile id="selectfile" style="display:none" class="form-control" onchange="HandfileAvatarTeacher" />
                                        <button class="btn btn-outline-primary" type="button" @onclick="TriggerFileInput">Chọn Ảnh</button>
                                    </div>
                                    <div class="position-relative">
                                        @if (string.IsNullOrEmpty(usercreate.Avartar))
                                        {
                                            <i class="bi bi-camera" style="font-size: 80px; color: #ccc; border: 2px solid #ccc; padding: 5px; border-radius: 50%;"></i>
                                        }
                                        else
                                        {
                                            <img src="@usercreate.Avartar" alt="Avatar" class="img-fluid rounded-circle" style="width: 80px; height: 80px; object-fit: cover; border: 2px solid #ccc; padding: 2px;" />
                                        }
                                    </div>
                                </div>

                            </div>

                            <div class="col-md-6">
                                <label class="form-label">Trạng Thái</label>
                                <select class="form-select" @bind="usercreate.Status">
                                    <option value="1">Hoạt động</option>
                                    <option value="0">Tạm dừng</option>
                                </select>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CloseModal">Hủy</button>
                    <button class="btn btn-primary" @onclick="SaveOrder">Lưu</button>
                </div>
            </div>
        </div>
    </div>

}
<div class="modal fade @(isExcelModalVisible ? "show" : "")" tabindex="-1" style="display:@(isExcelModalVisible ? "block" : "none"); background-color: rgba(0,0,0,0.5);">
    <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content">
            <!-- Tiêu đề -->
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title @* @(selectedClassId=Guid.Empty)? *@">Nhập dữ liệu học sinh</h5>
                <button type="button" class="btn-close" aria-label="Close" @onclick="CloseModal"></button>
            </div>
            <!-- Nội dung -->
            <div class="modal-body">
                <div class="mb-3">
                    <div class="mb-3 text-center">
                        <!-- Nhãn tải lên tệp -->
                        <label for="fileInput" class="btn btn-outline-primary" style="cursor: pointer;">
                            <i class="bi bi-upload"></i> Chọn file Excel
                        </label>
                        <!-- Input file -->
                        <InputFile OnChange="HandleFileSelected" id="fileInput" class="form-control d-none" oninput="fileNameDisplay.value = fileInput.value" />
                        <!-- Hiển thị tên file -->
                        <input type="text" id="fileNameDisplay" class="form-control mt-2 text-muted text-center" placeholder="File chưa được chọn" readonly />
                    </div>
                </div>
                <div class="text-center">
                    <button type="button" class="btn btn-primary me-2" @onclick="UploadFile">Lưu</button>
                </div>
            </div>
        </div>
    </div>
</div>
@code {
    private bool isExcelModalVisible = false;
    private List<UserDTOTEACHER> userDTOs = new List<UserDTOTEACHER>();
    private List<UserDTOTEACHER> FilteredOrders => userDTOs
       .Where(o => string.IsNullOrEmpty(SearchText) || o.FullName.Contains(SearchText, StringComparison.OrdinalIgnoreCase))
       .ToList();

    private bool CanGoPrevious => CurrentPage > 1;
    private bool CanGoNext => CurrentPage < TotalPages;
    private UserDTOTEACHER usercreate = new UserDTOTEACHER();
    private string? SearchText { get; set; }
    private Guid SelectedOrder { get; set; } = Guid.Empty;
    private UserDTOTEACHER EditingOrder { get; set; } = new UserDTOTEACHER();
    private bool ShowModal { get; set; } = false;
    private IBrowserFile? avatarTeacher;
    private int CurrentPage { get; set; } = 1;
    private int ItemsPerPage { get; set; } = 5; // Số mục trên mỗi trang
    private int TotalPages => (int)Math.Ceiling((double)FilteredOrders.Count() / ItemsPerPage);
    protected override async Task OnInitializedAsync()
    {
        await getuser();
    }
    private void PreviousPage()
    {
        if (CanGoPrevious)
        {
            CurrentPage--;
        }
    }

    private void NextPage()
    {
        if (CanGoNext)
        {
            CurrentPage++;
        }
    }
    private void showexcel()
    {
        isExcelModalVisible = true;
    }
    private async Task dowloadexcel()
    {
        var respon = await client.GetAsync("https://localhost:7046/api/User/export-sample");
        if (respon.IsSuccessStatusCode)
        {
            var content = await respon.Content.ReadAsByteArrayAsync();
            var base64String = Convert.ToBase64String(content);
            await jsruntime.InvokeVoidAsync("downloadFile", $"Template_Sample_{DateTime.Now:yyyyMMddHHmmss}.xlsx", base64String);
        }
    }
    private IBrowserFile? selectedFile;
    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.GetMultipleFiles(1); // Lấy tệp đầu tiên
        if (file.Count > 0)
        {
            selectedFile = file[0]; // Chọn tệp đầu tiên
        }
    }
    private async Task UploadFile()
    {
        if (selectedFile != null)
        {
            var stream = selectedFile.OpenReadStream(100 * 1024 * 1024); // Giới hạn 100MB
            var content = new MultipartFormDataContent();

            using (var memoryStream = new MemoryStream())
            {
                await stream.CopyToAsync(memoryStream);
                var fileBytes = memoryStream.ToArray();
                content.Add(new ByteArrayContent(fileBytes), "file", selectedFile.Name);
            }


            var response = await client.PostAsync($"https://localhost:7046/api/User/import-excel-teacher", content);
            if (response.IsSuccessStatusCode)
            {
                await jsruntime.InvokeVoidAsync("alert", "Tải file thành công");
                await getuser();
            }
            else
            {
                await jsruntime.InvokeVoidAsync("Swal.fire", new
                {
                    title = "Thất bại!",
                    text = "Đã xảy ra lỗi khi tải lên",
                    icon = "error",
                    confirmButtonText = "OK"
                });
            }
        }
        else
        {
            await jsruntime.InvokeVoidAsync("Swal.fire", new
            {
                title = "Thất bại!",
                text = "Vui lòng chọn một file",
                icon = "error",
                confirmButtonText = "OK"
            });
        }
    }
    private async Task getuser()
    {
        userDTOs = await client.GetFromJsonAsync<List<UserDTOTEACHER>>("https://localhost:7046/api/User/get-user-teacher");
    }

    private void AddOrder()
    {
        usercreate = new UserDTOTEACHER();
        ShowModal = true;
    }

    private async Task EditOrder()
    {
        if (SelectedOrder != Guid.Empty)
        {
            usercreate = await client.GetFromJsonAsync<UserDTOTEACHER>($"https://localhost:7046/api/User/get-by-id-user-teacher?id={SelectedOrder}");
            ShowModal = true;
        }
    }

    private async Task DeleteOrder()
    {
        if (SelectedOrder != Guid.Empty)
        {
            var response = await client.DeleteAsync($"https://localhost:7046/api/User/delete-user?id={SelectedOrder}");
            if (response.IsSuccessStatusCode)
            {

                SelectedOrder = Guid.Empty;
                await getuser();
                await jsruntime.InvokeVoidAsync("alert", "Xóa thành công!");
            }
            else
            {
                await jsruntime.InvokeVoidAsync("alert", "Lỗi khi xóa người dùng!");
            }
        }
    }

    private void ExportToExcel()
    {
        // Export logic can be implemented using a third-party library or JavaScript interop
        Console.WriteLine("Export to Excel functionality is triggered.");
    }
    private void HandfileAvatarTeacher(InputFileChangeEventArgs e){
        avatarTeacher = e.File; 
    }
    #region
    private async Task TriggerFileInput()
    {
        // Tìm và kích hoạt phần tử InputFile ẩn
        await jsruntime.InvokeVoidAsync("eval", "document.getElementById('selectfile').click()");
    }
    #endregion
    private async Task SaveOrder()
    {
        if (SelectedOrder == Guid.Empty)
        {
            // Tạo người dùng mới
            usercreate.IsLocked = true;
            var content = new MultipartFormDataContent();

            if (avatarTeacher != null)
            {
                var maxsizeavarta = 1 * 1024 * 1024;
                try
                {
                    var stream = avatarTeacher.OpenReadStream(maxsizeavarta);
                    var filecontent = new StreamContent(stream);
                    filecontent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(avatarTeacher.ContentType);
                    content.Add(filecontent, "avatarTeacher", avatarTeacher.Name);
                }
                catch (Exception ex)
                {
                    await jsruntime.InvokeVoidAsync("alert", $"Lỗi xử lý ảnh: {ex.Message}");
                    return;
                }
            }

            content.Add(new StringContent(usercreate.FullName ?? ""), "FullName");
            content.Add(new StringContent(usercreate.Email ?? ""), "Email");
            content.Add(new StringContent(usercreate.UserName ?? ""), "UserName");
            content.Add(new StringContent(usercreate.DateOfBirth?.ToString("yyyy-MM-dd") ?? ""), "DateOfBirth");
            content.Add(new StringContent(usercreate.Status.ToString()), "Status");
            content.Add(new StringContent(usercreate.PhoneNumber ?? ""), "PhoneNumber");
            content.Add(new StringContent(usercreate.PasswordHash ?? ""), "PasswordHash");
            content.Add(new StringContent(usercreate.IsLocked.ToString()), "IsLocked");

            var respon = await client.PostAsync("https://localhost:7046/api/User/create-user-Teacher", content);
            if (respon.IsSuccessStatusCode)
            {
                await getuser();
            }
            else
            {
                var errorResponse = await respon.Content.ReadAsStringAsync();
                await jsruntime.InvokeVoidAsync("alert", $"Thêm tài khoản không thành công: {errorResponse}");
            }
        }
        else
        {
            // Cập nhật người dùng hiện có
            var content = new MultipartFormDataContent();

            if (avatarTeacher != null)
            {
                var maxsizeavarta = 1 * 1024 * 1024;
                try
                {
                    var stream = avatarTeacher.OpenReadStream(maxsizeavarta);
                    var filecontent = new StreamContent(stream);
                    filecontent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(avatarTeacher.ContentType);
                    content.Add(filecontent, "avatarTeacher", avatarTeacher.Name);
                }
                catch (Exception ex)
                {
                    await jsruntime.InvokeVoidAsync("alert", $"Lỗi xử lý ảnh: {ex.Message}");
                    return;
                }
            }

            content.Add(new StringContent(usercreate.Id.ToString()), "Id");
            content.Add(new StringContent(usercreate.FullName ?? ""), "FullName");
            content.Add(new StringContent(usercreate.Email ?? ""), "Email");
            content.Add(new StringContent(usercreate.UserName ?? ""), "UserName");
            content.Add(new StringContent(usercreate.DateOfBirth?.ToString("yyyy-MM-dd") ?? ""), "DateOfBirth");
            content.Add(new StringContent(usercreate.Status.ToString()), "Status");
            content.Add(new StringContent(usercreate.PhoneNumber ?? ""), "PhoneNumber");
            content.Add(new StringContent(usercreate.PasswordHash ?? ""), "PasswordHash");
            content.Add(new StringContent(usercreate.IsLocked.ToString()), "IsLocked");

            content.Add(new StringContent(usercreate.RoleId.ToString()), "RoleId");


            content.Add(new StringContent(usercreate.Avartar), "Avartar");

            var respon = await client.PutAsync($"https://localhost:7046/api/User/update-user-teacher/", content);
            if (respon.IsSuccessStatusCode)
            {
                await getuser();
                SelectedOrder = Guid.Empty ;
            }
            else
            {
                var errorResponse = await respon.Content.ReadAsStringAsync();
                await jsruntime.InvokeVoidAsync("alert", $"Cập nhật tài khoản không thành công: {errorResponse}");
            }
        }

        CloseModal();
    }


    private void CloseModal()
    {
        isExcelModalVisible = false;
        ShowModal = false;
        EditingOrder = new UserDTOTEACHER();
    }

    private void SelectOrder(Guid orderId)
    {
        SelectedOrder = SelectedOrder == orderId ? Guid.Empty : orderId;
    }

    private void ToggleSelectAll(ChangeEventArgs e)
    {
        var isChecked = (bool)e.Value;
        SelectedOrder = isChecked ? userDTOs.FirstOrDefault()?.Id ?? Guid.Empty : Guid.Empty;
    }
}
<style>
    .table thead th {
        border-top: none; /* Bỏ viền trên */
        border-bottom: none; /* Bỏ viền dưới */
         /* Giảm độ đậm của chữ */
    }

</style>