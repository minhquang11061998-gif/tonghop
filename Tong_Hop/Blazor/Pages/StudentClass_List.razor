@page "/student-classes"
@using DataBase.Models
@using Database.DTOs
@using global::Data.DTOs
@inject HttpClient http
@inject NavigationManager navigationManager
@layout AdminLayout

<h3>Danh Sách Lớp Học của Học Sinh</h3>
<button class="btn btn-primary" @onclick="CreateStudentClass">Thêm mới</button>
<hr>
<table class="table">
    <thead>
        <tr>
            <th>STT</th>
            <th>Mã học sinh</th>
            <th>Tên lớp</th>
            <th>Ngày tham gia</th>
            <th>Trạng thái</th>
            <th>Hành động</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var studentClass in studentClasses)
        {
            var student = students.FirstOrDefault(s => s.Id == studentClass.StudentId);

            var classItem = classes.FirstOrDefault(c => c.Id == studentClass.ClassId);
            var className = classItem?.Name;

            <tr>
                <td>@(studentClasses.IndexOf(studentClass) + 1)</td>
                <td>@student?.Code</td>
                <td>@className</td>
                <td>@studentClass.JoinTime.ToString("dd/MM/yyyy")</td>
                <td>@(studentClass.Status == 1 ? "Đang học" : "Nghỉ học")</td>
                <td>
                    <button class="btn btn-warning" @onclick="(() => UpdateStudentClass(studentClass.Id))">Sửa</button>
                    <button class="btn btn-danger" @onclick="(() => ConfirmDelete(studentClass.Id))">Xóa</button>
                </td>
            </tr>
        }
    </tbody>
</table>

<!-- Xác nhận xóa -->
@if (showDeleteConfirmation)
{
    <div class="modal show" tabindex="-1" style="display: block; background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Xác nhận xóa</h5>
                    <button type="button" class="btn-close" @onclick="CancelDelete"></button>
                </div>
                <div class="modal-body">
                    <p>Bạn có chắc chắn muốn xóa không?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CancelDelete">Hủy</button>
                    <button type="button" class="btn btn-danger" @onclick="() => ConfirmDeleteStudentClass()">Xóa</button>
                </div>
            </div>
        </div>
    </div>
}


@code {

    private List<StudentClassDTO> studentClasses = new List<StudentClassDTO>();
    private List<Students> students = new List<Students>();
    private List<Classes> classes = new List<Classes>();
    private bool showDeleteConfirmation = false; // Biến hiển thị hộp thoại xóa
    private Guid deleteId; // Lưu trữ ID khi xác nhận xóa

    protected override async Task OnInitializedAsync()
    {
        await LoadStudentClasses();
        await LoadStudentsAndClasses();
    }

    private async Task LoadStudentClasses()
    {
        studentClasses = await http.GetFromJsonAsync<List<StudentClassDTO>>("api/StudentClass/get-all");
    }

    private async Task LoadStudentsAndClasses()
    {
        students = await http.GetFromJsonAsync<List<Students>>("api/Student/get-all-student2");
        classes = await http.GetFromJsonAsync<List<Classes>>("api/Classes/get-all-class");
    }

    private void CreateStudentClass()
    {
        navigationManager.NavigateTo("/create-student-class");
    }

    private void UpdateStudentClass(Guid id)
    {
        navigationManager.NavigateTo($"/update-student-class/{id}");
    }

    private void ConfirmDelete(Guid id)
    {
        deleteId = id;
        showDeleteConfirmation = true;
    }

    private async Task ConfirmDeleteStudentClass()
    {
        var response = await http.DeleteAsync($"api/StudentClass/delete?id={deleteId}");
        if (response.IsSuccessStatusCode)
        {
            await LoadStudentClasses();
        }
        showDeleteConfirmation = false;
    }


    private void CancelDelete()
    {
        showDeleteConfirmation = false;
    }
}
