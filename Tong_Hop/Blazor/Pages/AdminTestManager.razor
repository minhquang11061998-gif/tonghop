@page "/manage-test"
@using DataBase.DTOs
@using global::Data.DTOs
@layout AdminLayout
@inject HttpClient client
@inject IHttpClientFactory clientFactory;
@inject NavigationManager NavigationManager
@inject IJSRuntime Jsruntime

<div class="container-fluid mt-3">
    <!-- Header Buttons -->
    <div class="d-flex shadow-sm align-items-center p-3 bg-light rounded">
        <div class="d-flex flex-wrap gap-2">
            <button class="btn btn-primary btn-sm rounded-pill shadow" @onclick="ShowCreateTestModal" disabled="@(SelectedTest != Guid.Empty)">
                <i class="bi bi-plus-circle"></i> Tạo mới
            </button>
            <button class="btn btn-danger btn-sm rounded-pill shadow" @onclick="Deletetest" disabled="@(SelectedTest == Guid.Empty)">
                <i class="bi bi-trash"></i> Xóa
            </button>
            <button class="btn btn-success btn-sm rounded-pill shadow" @onclick="ShowQuestionDetailModal">
                <i class="bi bi-file-earmark-excel"></i> Nhập file Excel
            </button>
            <button class="btn btn-secondary btn-sm rounded-pill shadow" @onclick="DownloadExcelTemplate">
                <i class="bi bi-file-earmark-excel"></i> Tải file mẫu Excel
            </button>
        </div>

        <!-- Search Bar -->
        <div class="ms-auto" style="width: 300px;">
            <div class="input-group shadow-sm">
                <input type="text" placeholder="Tìm kiếm..." class="form-control border-0" @bind="SearchText" style="border-radius: 20px 0 0 20px;" />
                <span class="input-group-text bg-primary text-white border-0" style="border-radius: 0 20px 20px 0;">
                    <i class="bi bi-search"></i>
                </span>
            </div>
        </div>
    </div>

    <!-- Table Section -->
    <div class="table-responsive border rounded shadow-sm mt-4 bg-white">
        <table class="table table-hover table-striped align-middle text-center">
            <caption class="text-end">
                <div class="d-flex justify-content-end gap-2">
                    <button class="btn btn-secondary btn-sm rounded-pill shadow" @onclick="PreviousPage" disabled="@(!CanGoPrevious)">
                        <i class="bi bi-arrow-left"></i> Trước
                    </button>
                    <span class="align-self-center">Trang @CurrentPage / @TotalPages</span>
                    <button class="btn btn-secondary btn-sm rounded-pill shadow" @onclick="NextPage" disabled="@(!CanGoNext)">
                        <i class="bi bi-arrow-right"></i> Sau
                    </button>
                </div>
            </caption>
            <thead class="table-primary" style="border-radius: 10px;">
                <tr>
                    <th style="width: 50px;">
                        <input type="checkbox" @onchange="ToggleSelectAll" title="Chọn tất cả" />
                    </th>
                    <th>Tên đề thi</th>
                    <th>Mã đề thi</th>
                    <th>Thời gian (phút)</th>
                    <th>Môn học</th>
                    <th>Lớp</th>
                    <th>Điểm</th>
                    <th>Hành động</th>
                </tr>
            </thead>
            <tbody>
                @if (FilteredTests.Any())
                {
                    @foreach (var test in FilteredTests)
                    {
                        <tr class="@(SelectedTest == test.Id ? "table-info" : "")">
                            <td>
                                <input type="checkbox" checked="@(SelectedTest == test.Id)" @onchange="() => SelectTest(test.Id)" title="Chọn đề thi này" />
                            </td>
                            <td>@test.Name</td>
                            <td>@test.Code</td>
                            <td>@test.Minute</td>
                            <td>@(SubjectNameMap.TryGetValue(test.SubjectId, out var subjectName) ? subjectName : "N/A")</td>
                            <td>@(ClassNameMap.TryGetValue(test.ClassId, out var className) ? className : "N/A")</td>
                            <td>@(PointTypeNameMap.TryGetValue(test.PointTypeId, out var pointTypeName) ? pointTypeName : "N/A")</td>
                            <td>
                                <button class="btn btn-primary btn-sm rounded-pill shadow" @onclick="OpenModal" disabled="@(SelectedTest == Guid.Empty)">
                                    <i class="bi bi-eye"></i> Tạo câu hỏi
                                </button>
                                <button class="btn btn-info btn-sm rounded-pill shadow" @onclick="() => ShowTestDetailsModal(test.Id)">
                                    <i class="bi bi-eye"></i> Xem chi tiết
                                </button>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="8" class="text-muted text-center">Không tìm thấy đề thi.</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>
<!-- Modal Page for Test Questions -->
<div class="modal fade @(isTestQuestionsModalVisible ? "show" : "")" tabindex="-1" style="display:@(isTestQuestionsModalVisible ? "block" : "none"); overflow-y:auto;">
    <div class="modal-dialog modal-xl">
        <!-- Enhanced Modal Styling -->
        <div class="modal-content shadow-lg rounded-4">
            <div class="modal-header bg-gradient-primary text-white shadow-sm rounded-top">
                <h5 class="modal-title fw-bold">Danh sách câu hỏi</h5>
                <button type="button" class="btn-close text-white" @onclick="HideTestDetailsModal"></button>
            </div>
            <div class="modal-body p-4" style="max-height: 70vh; overflow-y: auto; background-color: #fdfdfd;">
                <!-- Filter Section -->
                @if (testQuestionDTOs.Any())
                {
                    <div class="mb-4 d-flex align-items-center border-bottom pb-3">
                        <label for="filterType" class="form-label me-3 fw-semibold">Lọc theo loại câu hỏi:</label>
                        <select id="filterType" @onchange="OnTypeChanged" class="form-select w-auto border-primary shadow-sm">
                            <option value="">Tất cả</option>
                            <option value="1">Trắc nghiệm 1 Đáp án</option>
                            <option value="2">Trắc nghiệm nhiều đáp án</option>
                            <option value="3">Đúng/Sai</option>
                            <option value="4">Điền vào chỗ trống</option>
                        </select>
                    </div>

                    <!-- Table Section -->
                    <div class="table-responsive rounded border shadow-sm">
                        <table class="table table-hover table-striped align-middle text-center">
                            <thead class="table-primary">
                                <tr>
                                    <th scope="col" class="py-3">STT</th>
                                    <th scope="col">Nội dung</th>
                                    <th scope="col">Đáp án</th>
                                    <th scope="col">Đáp án đúng</th>
                                    <th scope="col">Mức độ</th>
                                    <th scope="col" style="width: 100px;">Thao tác</th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (filteredQuestions.Any())
                                {
                                    @foreach (var question in filteredQuestions)
                                    {
                                        <tr class="align-middle">
                                            <td class="fw-bold">@(filteredQuestions.IndexOf(question) + 1)</td>
                                            <td class="text-start">@question.QuestionName</td>
                                            <td>@string.Join(", ", question.Answers.Select(a => a.Answer))</td>
                                            <td class="text-success fw-bold">@question.RightAnswer</td>
                                            <td>
                                                @switch (question.Level)
                                                {
                                                    case 1:
                                                        <span class="badge bg-success">Dễ</span>
                                                        break;
                                                    case 2:
                                                        <span class="badge bg-warning">Trung Bình</span>
                                                        break;
                                                    case 3:
                                                        <span class="badge bg-danger">Khó</span>
                                                        break;
                                                    case 4:
                                                        <span class="badge bg-dark">Siêu Khó</span>
                                                        break;
                                                    default:
                                                        <span class="badge bg-secondary">Không xác định</span>
                                                        break;
                                                }
                                            </td>

                                            <td>
                                                <button type="button" class="btn btn-warning btn-sm shadow-sm rounded-pill px-3" title="Chỉnh sửa" @onclick="() => UpdateQuestionModal(question.Id)">
                                                    <i class="bi bi-pencil"></i>
                                                </button>
                                                <button type="button" class="btn btn-danger btn-sm shadow-sm rounded-pill px-3" title="Xóa" @onclick="() => deletequestion(question.Id, question.Level)">
                                                    <i class="bi bi-trash3"></i>
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                }
                                else
                                {
                                    <tr>
                                        <td colspan="5" class="text-center text-muted py-4">Không có câu hỏi nào trong đề thi này.</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
                else
                {
                    <div class="alert alert-warning text-center fw-semibold">Không có câu hỏi nào trong đề thi này.</div>
                }
            </div>
            <div class="modal-footer bg-light d-flex justify-content-end border-top rounded-bottom">
                <button type="button" class="btn btn-secondary shadow-sm px-4" @onclick="HideTestDetailsModal">Đóng</button>
            </div>
        </div>
    </div>
</div>

<div class="container-fluid row p-3">
    <div class="modal fade @(isCreateTestModalVisible  ? "show" : "")" tabindex="-1" style="display:@(isCreateTestModalVisible  ? "block" : "none");">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Tạo gói đề</h5>
                    <button type="button" class="btn-close" @onclick="HideCreateTestModal"></button>
                </div>
                <div class="modal-body">
                    <div class="row g-3">
                        <div class="col-md-6">
                            <label class="form-label fw-bold">Tên Đề:</label>
                            <input type="text" class="form-control" @bind=testDTO.Name placeholder="Nhập tên đề" />
                        </div>
                        <div class="col-md-6">
                            <label class="form-label fw-bold">Thời Gian (phút):</label>
                            <input type="number" class="form-control" @bind=testDTO.Minute placeholder="Nhập thời gian" />
                        </div>
                        <div class="col-md-6">
                            <label class="form-label fw-bold">Môn học:</label>
                            <select class="form-select" @bind="testDTO.SubjectId">
                                <option value="">-- Chọn môn học --</option>
                                @foreach (var item in subjectDTO)
                                {
                                    <option value="@item.Id">@item.Name</option>
                                }
                            </select>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label fw-bold">Lớp:</label>
                            <select class="form-select" @bind="testDTO.ClassId">
                                <option value="">-- Chọn lớp --</option>
                                @foreach (var item in classDTOs)
                                {
                                    <option value="@item.Id">@item.Name</option>
                                }
                            </select>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label fw-bold">Điểm:</label>
                            <select class="form-select" @bind="testDTO.PointTypeId">
                                <option value="">-- Chọn kiểu điểm --</option>
                                @foreach (var item in pointTypeDTOs)
                                {
                                    <option value="@item.Id">@item.Name</option>
                                }
                            </select>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label fw-bold">Phòng thi:</label>
                            <select class="form-select" @bind="testDTO.ExamRoomId">
                                <option value="">-- Chọn phòng thi --</option>
                                @foreach (var item in roomDTOs)
                                {
                                    <option value="@item.Id">@item.Name</option>
                                }
                            </select>
                        </div>
                    </div>
                </div>


                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="Submit">Lưu</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal fade @(isQuestionDetailModalVisible ? "show" : "")" tabindex="-1" style="display:@(isQuestionDetailModalVisible ? "block" : "none")">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Thêm câu hỏi</h5>
                    <button type="button" class="btn-close" @onclick="HideQuestionDetailModal"></button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-5 m-1">
                            <label>Chọn File Excel</label>
                            <InputFile OnChange="HandleFileSelected" class="form-control" />
                        </div>
                        <div class="col-5 m-1">
                            <label>Gói đề:</label>
                            <select @bind="testQuestions.TestId" class="form-select">
                                <option value="">--chọn--</option>
                                @foreach (var item in testList)
                                {
                                    <option value="@item.Id">@item.Name</option>
                                }
                            </select>
                        </div>

                    </div>
                </div>
                <div class="modal-footer">
                    <div>
                        <button class="btn btn-primary" @onclick="UploadFile">
                            <i class="bi bi-file-earmark-excel"></i>Tải lên
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

</div>
<div class="modal fade @(showcreatequestion ? "show" : "")" tabindex="-1" style="display:@(showcreatequestion ? "block" : "none")">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Tạo câu hỏi mới</h5>
                <button type="button" class="btn-close" @onclick="closemodal"></button>
            </div>
            <div class="modal-body">
                <label>Loại câu hỏi:</label>
                <select @onchange="ChangeQuestionType" class="form-select">
                    <option value="1">Trắc nghiệm 1 đáp án</option>
                    <option value="2">Trắc nghiệm nhiều đáp án</option>
                    <option value="3">Đúng/Sai</option>
                </select>

                <div class="mb-3">
                    <label for="levelSelect">Cấp độ câu hỏi:</label>
                    <select id="levelSelect" class="form-select" @bind="testQuestion.Level">
                        <option value="1">Dễ</option>
                        <option value="2">Trung Bình</option>
                        <option value="3">Khó</option>
                        <option value="4">Rất khó</option>
                    </select>
                </div>

                <div class="mb-3">
                    <label for="questionName">Tên câu hỏi:</label>
                    <input id="questionName" class="form-control" @bind="testQuestion.QuestionName" placeholder="Nhập tên câu hỏi..." />
                </div>

                @foreach (var (answer, index) in testQuestion.Answers.Select((value, i) => (value, i)))
                {
                    <div class="mb-2">
                        <input class="form-control" @onchange="e => UpdateAnswer(e, index)" value="@answer" placeholder="Nhập đáp án..." />
                        @if (testQuestion.QuestionType == 1)
                        {
                            <input type="radio" name="correctAnswer" @onclick="() => SetCorrectAnswer(index)" />
                        }
                        else if (testQuestion.QuestionType == 2)
                        {
                            <input type="checkbox" @onchange="e => ToggleCorrectAnswer(index, (bool)e.Value)" />
                        }
                    </div>
                }

                <button class="btn btn-sm btn-primary" @onclick="AddAnswerField">Thêm đáp án</button>
                <div class="text-danger">@Message</div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" @onclick="closemodal">Đóng</button>
                <button class="btn btn-primary" @onclick="CreateQuestionWithAnswers">Lưu câu hỏi</button>
            </div>
        </div>
    </div>
</div>

@code {
    private Dictionary<Guid, string> SubjectNameMap => subjectDTO.ToDictionary(s => s.Id, s => s.Name);
    private Dictionary<Guid, string> ClassNameMap => classDTOs.ToDictionary(c => c.Id, c => c.Name);
    private Dictionary<Guid, string> PointTypeNameMap => pointTypeDTOs.ToDictionary(p => p.Id, p => p.Name);
    private void OpenModal(){
        testQuestion.TestId = SelectedTest; // Gán TestId vào câu hỏi
        showcreatequestion = true;
    }
    private void closemodal(){
        showcreatequestion = false;
    }
    private void PreviousPage()
    {
        if (CanGoPrevious)
        {
            CurrentPage--;
        }
    }

    private void NextPage()
    {
        if (CanGoNext)
        {
            CurrentPage++;
        }
    }
    private void SelectTest(Guid orderId)
    {
        SelectedTest = SelectedTest == orderId ? Guid.Empty : orderId;
    }
    private void ToggleSelectAll(ChangeEventArgs e)
    {
        var isChecked = (bool)e.Value;
        SelectedTest = isChecked ? testList.FirstOrDefault()?.Id ?? Guid.Empty : Guid.Empty;
    }
    private bool isTestQuestionsModalVisible = false;
    private TestDTO? SelectedTestDetails;
    private async Task ShowTestDetailsModal(Guid testId)
    {
        isTestQuestionsModalVisible = true;
        await question(testId);
        StateHasChanged(); // Refresh UI
    }
    private void HideTestDetailsModal()
    {
        isTestQuestionsModalVisible = false;
        SelectedTestDetails = null;
        testQuestionDTOs.Clear();
        StateHasChanged(); // Refresh UI
    }
    // Biến lưu loại câu hỏi được chọn để lọc
    private int? selectedType = null;
    private List<TestQuestionDTO> filteredQuestions
    {
        get
        {
            var filtered = !selectedType.HasValue
                ? testQuestionDTOs
                : testQuestionDTOs.Where(q => q.Type == selectedType.Value).ToList();
            Console.WriteLine($"Lọc câu hỏi: {filtered.Count} câu hỏi phù hợp với loại {selectedType}");
            return filtered;
        }
    }

    private void OnTypeChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int type))
        {
            selectedType = type; // Gán giá trị kiểu số nguyên
        }
        else
        {
            selectedType = null; // Không chọn gì thì đặt về null
        }
        Console.WriteLine($"Giá trị selectedType: {selectedType}");
        StateHasChanged(); // Làm mới giao diện
    }
    private bool isQuestionModalVisible = false;
    private bool CanGoPrevious => CurrentPage > 1;
    private bool CanGoNext => CurrentPage < TotalPages;
    private Guid SelectedTest { get; set; } = Guid.Empty;
    private bool showcreatequestion = false;
    private List<listdetailquestion> testQuestionss = new List<listdetailquestion>();
    private TestQuestion_TestQuestionAnswersDTO testQuestions = new TestQuestion_TestQuestionAnswersDTO();
    private List<TestDTO> testList = new List<TestDTO>();
    private List<TestDTO> FilteredTests => testList
       .Where(o => string.IsNullOrEmpty(SearchText) || o.Name.Contains(SearchText, StringComparison.OrdinalIgnoreCase))
       .Skip((CurrentPage - 1) * ItemsPerPage)
       .Take(ItemsPerPage)
       .ToList();
    private TestQuestionDTO testQuestio = new TestQuestionDTO();
    private GetListTestQueryDTO queryDTO = new GetListTestQueryDTO();
    private List<TestQuestionDTO> testQuestionDTOs = new List<TestQuestionDTO>();
    private List<SubjectDTO> subjectDTO = new List<SubjectDTO>();
    private List<ClassesDTO> classDTOs = new List<ClassesDTO>();
    private List<PointTypeDTO> pointTypeDTOs = new List<PointTypeDTO>();
    private List<RoomDTO> roomDTOs = new List<RoomDTO>();
    private TestDTO testDTO = new TestDTO();
    private IBrowserFile selectedFile;
    private string username;
    private string SearchText { get; set; }
    private int CurrentPage { get; set; } = 1;
    private int ItemsPerPage { get; set; } = 5; // Số mục trên mỗi trang
    private int TotalPages => (int)Math.Ceiling((double)FilteredTests.Count() / ItemsPerPage);
    protected override async Task OnInitializedAsync()
    {
        try
        {
            await detailtestGrid();
            await detailsubject();
            await detailclass();
            await detailpoint();
            await SearchTests();
            await detailroom();
            StateHasChanged();
        }
        catch (Exception)
        {

        }

    }

    private async Task detailroom(){
        var client = clientFactory.CreateClient("Get");
        var url = "https://localhost:7046/api/Room/get-all-room";
        roomDTOs = await client.GetFromJsonAsync<List<RoomDTO>>(url);
    }
    private async Task detailquestion(Guid id)
    {
        var client = clientFactory.CreateClient("Get");
        var url = $"https://localhost:7046/api/TestQuestion/get-by-id-question-answer?id={id}";
        testQuestions = await client.GetFromJsonAsync<TestQuestion_TestQuestionAnswersDTO>(url);

    }
    private async Task updatequestion()
    {
        var Httpclient = clientFactory.CreateClient("Put");
        var url = $"https://localhost:7046/api/TestQuestion/update_question_answer";
        var respon = await Httpclient.PutAsJsonAsync(url, testQuestio);

    }
    private async Task deletequestion(Guid id, int level)
    {
        var Client = clientFactory.CreateClient("Delete");
        var url = $"https://localhost:7046/api/TestQuestion/Delete_TestQuestion?Id={id}";
        var respon = await Client.DeleteAsync(url);
        if (respon.IsSuccessStatusCode)
        {
            await LoadQuestions(id, level);
            StateHasChanged();
        }
        else
        {

            Console.WriteLine("Failed to delete the question.");
        }

    }
    private async Task detailtestGrid()
    {
        var httpClient = clientFactory.CreateClient("Get");
        var url = $"https://localhost:7046/api/Test/get-all-test";
        testList = await httpClient.GetFromJsonAsync<List<TestDTO>>(url);
    }
    private async Task detailpoint()
    {
        var httpclient = clientFactory.CreateClient("Get");
        var url = $"https://localhost:7046/api/PointTypeDTO/GetAll_pointtype";
        pointTypeDTOs = await httpclient.GetFromJsonAsync<List<PointTypeDTO>>(url);
    }
    private async Task detailsubject()
    {
        var httpclient = clientFactory.CreateClient("Get");
        var url = $"https://localhost:7046/api/Subject/get-all-subject";
        subjectDTO = await httpclient.GetFromJsonAsync<List<SubjectDTO>>(url);
    }
    private async Task detailclass()
    {
        var httpclient = clientFactory.CreateClient("Get");
        var url = $"https://localhost:7046/api/Classes/get-all-class";
        classDTOs = await httpclient.GetFromJsonAsync<List<ClassesDTO>>(url);
    }
    private List<TestQuestion_TestQuestionAnswersDTO> selectedQuestions = new List<TestQuestion_TestQuestionAnswersDTO>();

    private async Task LoadQuestions(Guid testId, int level)
    {
        var response = await client.GetAsync($"https://localhost:7046/api/Test/{testId}/questions?level={level}");

        if (response.IsSuccessStatusCode)
        {
            selectedQuestions = await response.Content.ReadFromJsonAsync<List<TestQuestion_TestQuestionAnswersDTO>>();
        }
        else
        {
            selectedQuestions.Clear();
        }

        StateHasChanged();
    }
    private async Task delete(Guid id)
    {
        var httpclient = clientFactory.CreateClient("Delete");
        var url = $"https://localhost:7046/api/TestQuestion/Delete_TestQuestion?Id={id}";
        var responseMessage = await httpclient.DeleteAsync(url);
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);

    }
    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.GetMultipleFiles(1); // Lấy tệp đầu tiên
        if (file.Count > 0)
        {
            selectedFile = file[0]; // Chọn tệp đầu tiên
        }
    }
    private async Task DownloadExcelTemplate()
    {
        var response = await client.GetAsync("https://localhost:7046/api/TestQuestion/export-template");
        if (response.IsSuccessStatusCode)
        {
            var content = await response.Content.ReadAsByteArrayAsync();
            var base64String = Convert.ToBase64String(content);
            await Jsruntime.InvokeVoidAsync("downloadFile", "MauCauHoi.xlsx", base64String);
        }
    }
    private async Task UploadFile()
    {
        if (selectedFile != null)
        {
            var stream = selectedFile.OpenReadStream(100 * 1024 * 1024); // Giới hạn 100MB
            var content = new MultipartFormDataContent();

            using (var memoryStream = new MemoryStream())
            {
                await stream.CopyToAsync(memoryStream);
                var fileBytes = memoryStream.ToArray();

                // Thêm tệp vào nội dung gửi
                content.Add(new ByteArrayContent(fileBytes), "file", selectedFile.Name);
            }

            if (testQuestions.TestId != Guid.Empty)
            {
                content.Add(new StringContent(testQuestions.TestId.ToString()), "id");
            }
            else
            {
                await Jsruntime.InvokeVoidAsync("Swal.fire", new
                {
                    title = "Thất bại!",
                    text = "Vui lòng chọn gói đề",
                    icon = "error",
                    confirmButtonText = "OK"
                });
            }

            if (username != null)
            {
                content.Add(new StringContent(username.ToString()), "Createbyname");
            }

            var response = await client.PostAsync($"https://localhost:7046/api/TestQuestion/import_questions?id={testQuestions.TestId}", content);
            if (response.IsSuccessStatusCode)
            {
                await Jsruntime.InvokeVoidAsync("Swal.fire", new
                {
                    title = "Thành công!",
                    text = "Thêm đữ liệu thành công!",
                    icon = "success",
                    confirmButtonText = "OK"
                });
                NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
                await question(testQuestions.TestId);

                await CheckForDuplicates();
            }
            else
            {
                await Jsruntime.InvokeVoidAsync("Swal.fire", new
                {
                    title = "Thất bại!",
                    text = "Đã xảy ra lỗi khi tải lên",
                    icon = "error",
                    confirmButtonText = "OK"
                });
            }
        }
        else
        {
            await Jsruntime.InvokeVoidAsync("Swal.fire", new
            {
                title = "Thất bại!",
                text = "Vui lòng chọn một file",
                icon = "error",
                confirmButtonText = "OK"
            });
        }
    }

    private async Task question(Guid id)
    {
        testQuestionss = await client.GetFromJsonAsync<List<listdetailquestion>>($"https://localhost:7046/api/TestQuestion/get-question-details/{id}");
        testQuestionDTOs = testQuestionss
            .OrderBy(q => q.Type) // Sắp xếp theo Type
            .Select(q => new TestQuestionDTO
                {
                    QuestionName = q.Questionname,
                    Type = q.Type,
                    Answers = q.answer,
                    RightAnswer = q.RightAnswer,
                    Level = q.level
                }).ToList();

        Console.WriteLine($"Số câu hỏi sau khi gán: {testQuestionDTOs.Count}");
        StateHasChanged(); // Refresh UI
    }



    private async Task CheckForDuplicates()
    {
        var duplicates = testQuestionss.GroupBy(q => q.Questionname)
            .Where(g => g.Count() > 1)
            .SelectMany(g => g)
            .ToList();

        if (duplicates.Any())
        {
            string.Join(", ", duplicates.Select(q => q.Questionname));

            testQuestionss = testQuestionss.Where(q => !duplicates.Contains(q)).ToList();
        }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var token = await Jsruntime.InvokeAsync<string>("localStorage.getItem", "YourSuperSecretKeyHere");
            if (!string.IsNullOrEmpty(token))
            {
                try
                {
                    var handler = new System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler();
                    var jsonToken = handler.ReadToken(token) as System.IdentityModel.Tokens.Jwt.JwtSecurityToken;

                    username = jsonToken?.Claims.FirstOrDefault(c => c.Type == "nameab")?.Value;
                    testQuestio.CreatedByName = username;
                    testQuestion.CreatedByName = username;
                    if (string.IsNullOrEmpty(username))
                    {
                        Console.WriteLine("Không tìm thấy tên người dùng trong token.");
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Lỗi khi đọc token: {ex.Message}");
                }
            }
            else
            {
                Console.WriteLine("Không tìm thấy token trong local storage.");
            }
        }
    }
    private async Task Submit()
    {
        var httpClient = clientFactory.CreateClient("Post");
        var url = $"https://localhost:7046/api/Test/create-test-testcode-examroomtestcode";
        var response = await httpClient.PostAsJsonAsync<TestDTO>(url, testDTO);
        Console.WriteLine($"Name: {testDTO.Name}, Minute: {testDTO.Minute}, SubjectId: {testDTO.SubjectId}, ClassId: {testDTO.ClassId}, PointTypeId: {testDTO.PointTypeId}");
        if (response.IsSuccessStatusCode)
        {
            await Jsruntime.InvokeVoidAsync("Swal.fire", new
            {
                title = "Thành công!",
                text = "Thêm đữ liệu thành công!",
                icon = "success",
                confirmButtonText = "OK"
            });
            NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
            HideCreateTestModal();
            await SearchTests();
        }
        else
        {
            await Jsruntime.InvokeVoidAsync("Swal.fire", new
            {
                title = "Thất bại!",
                text = "Thêm dữ liệu thất bại.",
                icon = "error",
                confirmButtonText = "OK"
            });
        }


    }
    private Guid? selectedTestId = null;

    private void ToggleTest(Guid testId)
    {
        if (selectedTestId == testId)
        {
            // Đóng nếu nhấp lại vào cùng một thư mục
            selectedTestId = null;
        }
        else
        {
            // Mở thư mục được nhấp
            selectedTestId = testId;
        }
    }
    private async Task Deletetest()
    {
        var httpClient = clientFactory.CreateClient("Delete");
        var url = $"https://localhost:7046/api/Test/delete-test?id={SelectedTest}";
        var res = await httpClient.DeleteAsync(url);
        StateHasChanged();
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);

    }
    private async Task SearchTests()
    {

        var httpClient = clientFactory.CreateClient("Get");
        var url = $"https://localhost:7046/api/Test/get-list-test";
        testList = await httpClient.GetFromJsonAsync<List<TestDTO>>(url);
    }
 
        private bool isCreateTestModalVisible = false;
        private bool isQuestionDetailModalVisible = false;
        private bool isQuestionDetailModalVisibles = false;
        private bool isQuestionDetailModalVisibless = false;

        private void ShowCreateTestModal()
        {
            isCreateTestModalVisible = true;
            StateHasChanged();
        }

        private void HideCreateTestModal()
        {
            isCreateTestModalVisible = false;
        }
        private void ShowQuestionDetailModals()
        {
            isQuestionDetailModalVisibles = true;

        }
        private async void UpdateQuestionModal(Guid id)
        {
        await updatequestion();
            isQuestionDetailModalVisibless = true;

        }
        private void ShowQuestionDetailModal()
        {
            isQuestionDetailModalVisible = true;
        }

        private void HideQuestionDetailModal()
        {
            isQuestionDetailModalVisible = false;
        }
        private void HideQuestionDetailModals()
        {
            isQuestionDetailModalVisibles = false;
        }
        private void HideQuestionDetailModalss()
        {
            isQuestionDetailModalVisibless = false;
        }
    
    private TestQuestion_TestQuestionAnswersDTO testQuestion = new  TestQuestion_TestQuestionAnswersDTO()
        {
            QuestionType = 1,
            Answers = new List<string> { "" },
            CorrectAnswers = new List<string>()
        };
    private string Message;

    // Thay đổi loại câu hỏi
    private void ChangeQuestionType(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int type))
        {
            testQuestion.QuestionType = type;
            testQuestion.Answers.Clear();
            testQuestion.CorrectAnswers.Clear();

            if (type == 1 || type == 2)
                testQuestion.Answers.AddRange(new string[] { "" });
            else if (type == 3)
                testQuestion.Answers.AddRange(new[] { "True", "False" });
        }
        StateHasChanged();
    }

    // Thêm đáp án mới
    private void AddAnswerField()
    {
        if (testQuestion.QuestionType == 1 || testQuestion.QuestionType == 2)
        {
            if (testQuestion.Answers.Count < 4)
                testQuestion.Answers.Add("");
        }
        else
        {
            testQuestion.Answers.Add("");
        }
    }

    // Cập nhật đáp án
    private void UpdateAnswer(ChangeEventArgs e, int index)
    {
        if (index >= 0 && index < testQuestion.Answers.Count)
            testQuestion.Answers[index] = e.Value?.ToString() ?? "";
    }

    // Chọn đáp án đúng (1 đáp án)
    private void SetCorrectAnswer(int index)
    {
        if (index >= 0 && index < testQuestion.Answers.Count)
        {
            testQuestion.CorrectAnswers.Clear();
            testQuestion.CorrectAnswers.Add(testQuestion.Answers[index]);
        }
    }

    // Chọn/bỏ chọn đáp án đúng (nhiều đáp án)
    private void ToggleCorrectAnswer(int index, bool isChecked)
    {
        if (index >= 0 && index < testQuestion.Answers.Count)
        {
            var answer = testQuestion.Answers[index];
            if (isChecked)
                testQuestion.CorrectAnswers.Add(answer);
            else
                testQuestion.CorrectAnswers.Remove(answer);
        }
    }

    // Gửi câu hỏi lên API
    private async Task CreateQuestionWithAnswers()
    {
        // Kiểm tra dữ liệu hợp lệ
        if (string.IsNullOrWhiteSpace(testQuestion.QuestionName) || testQuestion.Answers.Count == 0)
        {
            Message = "Vui lòng điền đầy đủ thông tin câu hỏi và đáp án.";
            return;
        }

        if (testQuestion.CorrectAnswers.Any(ca => !testQuestion.Answers.Contains(ca)))
        {
            Message = "Đáp án đúng phải nằm trong danh sách đáp án.";
            return;
        }

        // Gửi lên API
        var response = await client.PostAsJsonAsync("https://localhost:7046/api/TestQuestion/create_question_answwer", testQuestion);
        if (response.IsSuccessStatusCode)
        {
            await ShowSuccessMessage("Câu hỏi đã được tạo thành công!");
            ResetForm();
        }
        else
        {
            Message = $"Lỗi tạo câu hỏi: {await response.Content.ReadAsStringAsync()}";
        }
    }

    // Hiển thị thông báo thành công
    private async Task ShowSuccessMessage(string text)
    {
        await Jsruntime.InvokeVoidAsync("Swal.fire", new { title = "Thành công!", text, icon = "success" });
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }
    private void ResetForm()
    {
        testQuestion = new TestQuestion_TestQuestionAnswersDTO
            {
                QuestionType = 1,
                Answers = new List<string> { "", "", "", "" },
                CorrectAnswers = new List<string>()
            };
        Message = string.Empty;
    }
        
}

<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>

       