@page "/update-class/{id:guid}"
@using System.Text.Json
@using DataBase.DTOs
@using DataBase.Models
@inject HttpClient http
@layout AdminLayout
@inject NavigationManager navi

<h3>Cập nhật lớp học</h3>

<EditForm Model="classItem" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="code" class="form-label">Mã lớp</label>
        <InputText id="code" class="form-control" @bind-Value="classItem.Code" disabled required />
    </div>

    <div class="mb-3">
        <label for="name" class="form-label">Tên lớp</label>
        <InputText id="name" class="form-control" @bind-Value="classItem.Name" required />
    </div>

    <div class="mb-3">
        <label for="maxStudent" class="form-label">Sĩ số</label>
        <InputNumber id="maxStudent" class="form-control" @bind-Value="classItem.MaxStudent" required />
    </div>

    <div class="mb-3">
        <label for="teacher" class="form-label">Giáo viên</label>
        <select id="teacher" class="form-select" @bind="classItem.TeacherId" required>
            @foreach (var teacher in teachers)
            {
                <option value="@teacher.Id">@teacher.Code</option>
            }
        </select>
    </div>

    <div class="mb-3">
        <label for="grade" class="form-label">Khối lớp</label>
        <select id="grade" class="form-select" @bind="classItem.GradeId" required>
            @foreach (var grade in grades)
            {
                <option value="@grade.Id">@GetGradeName(grade.Name)</option>
            }
        </select>
    </div>


    <div class="mb-3">
        <label for="subject" class="form-label">Môn học</label>
        <select id="subject" class="form-select" @bind="classItem.SubjectId" required>
            @foreach (var subject in subjects)
            {
                <option value="@subject.Id">@subject.Name</option>
            }
        </select>
    </div>

    <div class="mb-3">
        <label for="status" class="form-label">Ghi chú</label>
        <InputNumber id="status" class="form-control" @bind-Value="classItem.Status" required />
    </div>

    <div class="mb-3">
        <button type="submit" class="btn btn-primary">Cập nhật</button>
        <button type="button" class="btn btn-secondary" @onclick="Cancel">Quay lại</button>
    </div>
</EditForm>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}

@code {
    [Parameter]
    public Guid Id { get; set; } // Id của lớp cần cập nhật

    private ClassesDTO classItem = new ClassesDTO();
    private List<Teachers> teachers = new List<Teachers>();
    private List<GradeDTO> grades = new List<GradeDTO>();
    private List<SubjectDTO> subjects = new List<SubjectDTO>();
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadTeachersAndGrades();
        await LoadClassDetails();
    }

    private async Task LoadTeachersAndGrades()
    {
        teachers = await http.GetFromJsonAsync<List<Teachers>>("https://apismartschools.azurewebsites.net/api/Teacher/get-all-teacher");
        grades = await http.GetFromJsonAsync<List<GradeDTO>>("https://apismartschools.azurewebsites.net/api/Grade/get-grade");
    }

    private async Task LoadClassDetails()
    {
        var response = await http.GetFromJsonAsync<ClassesDTO>($"https://apismartschools.azurewebsites.net/api/Classes/gte-by-id-class?Id={Id}");
        if (response != null)
        {
            classItem = response;

            // Tải môn học sau khi lấy lớp học
            await LoadSubjects();
        }
        else
        {
            errorMessage = "Không tìm thấy lớp học.";
        }
    }

    private async Task LoadSubjects()
    {
        // Tải danh sách môn học dựa trên GradeId
        subjects = await http.GetFromJsonAsync<List<SubjectDTO>>($"https://apismartschools.azurewebsites.net/api/Subject/get-subjects-by-grade?GradeId={classItem.GradeId}");
    }

    private async Task HandleValidSubmit()
    {
        // Ghi log giá trị của classItem trước khi gửi
        Console.WriteLine($"Class Item: {JsonSerializer.Serialize(classItem)}");

        // Thực hiện gửi yêu cầu cập nhật lớp học
        var response = await http.PutAsJsonAsync("https://apismartschools.azurewebsites.net/api/Classes/update-class-and-testcodes", classItem);

        // Kiểm tra phản hồi từ server
        if (response.IsSuccessStatusCode)
        {
            // Chuyển hướng nếu thành công
            navi.NavigateTo("/Lop");
        }
        else
        {
            // Xử lý khi cập nhật không thành công
            errorMessage = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"Error updating class: {errorMessage}");
        }
    }

    private void Cancel()
    {
        navi.NavigateTo("/Lop");
    }

    private string GetGradeName(int gradeNumber)
    {
        return $"Khối {gradeNumber}"; // Đổi tên cho phù hợp
    }
}
