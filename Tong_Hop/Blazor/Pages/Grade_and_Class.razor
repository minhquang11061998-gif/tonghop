@page "/grade_and_class"
@layout AdminLayout
@inject IJSRuntime jsruntime
@inject HttpClient client
@using System.Net.Http.Json
@using System.IdentityModel.Tokens.Jwt
@using Blazor.Data
@using DataBase.DTOs
@using DataBase.Models
@using Microsoft.AspNetCore.Components.Web
@using global::Data.DTOs
<PageTitle>Quản lí lớp học</PageTitle>

<div class="container-fluid mt-3">
    <div class="mb-3 d-flex">
        <div class="d-flex flex-wrap gap-2">
            <button class="btn btn-primary btn-sm" @onclick="()=>ShowCreateForm(ModalType.Add)">
                <i class="bi bi-plus-circle"></i> Tạo mới
            </button>
            <button class="btn btn-warning btn-sm" @onclick="loadidGrade">
                <i class="bi bi-pencil-square" ></i> Chỉnh sửa
            </button>
            <button class="btn btn-danger btn-sm" @onclick="deletegrade">
                <i class="bi bi-trash"></i> Xóa
            </button> 
        </div>
        <div class="ms-auto" style="width: 250px;">
            <div class="input-group">
                <input type="text" placeholder="Tìm kiếm..." class="form-control border" @bind="seachestudent" />
                <span class="input-group-text bg-light border">
                    <i class="bi bi-search text-muted"></i>
                </span>
            </div>
        </div>
    </div>
    <table class="table table-hover">
        <thead class="table-primary">
            <tr>
                <th style="width: 90px;">
                    <input type="checkbox" title="Chọn tất cả" />
                </th>
                <th scope="col">Tên khối</th>
                <th style="width: 150px;">Trạng thái</th>
            </tr>
        </thead>
        <tbody>
            @if (FilteredOrders != null && FilteredOrders.Any())
            {
                @foreach (var item in FilteredOrders.OrderBy(c => c.Name))
                {
                    <tr>
                        <td></td>
                        <td>
                            <span class="text-primary" style="cursor: pointer;" @onclick="() => ToggleTree(item.Id)">
                                Khối @item.Name
                            </span>
                        </td>
                        <td>
                            <span class="badge @(item.Status == 1 ? "bg-success" : "bg-secondary")">
                                @(item.Status == 1 ? "Hoạt động" : "Tạm dừng")
                            </span>
                        </td>
                    </tr>

                    @if (ExpandedTasks.Contains(item.Id))
                    {
                        if (classes != null && classes.Any(c => c.GradeId == item.Id))
                        {
                            @if (iscreatclass && idgrade == item.Id)
                            {
                                <tr>
                                    <td>
                                        @if (!string.IsNullOrWhiteSpace(classcreateandupdate.Name))
                                        {
                                            <button class="btn btn-primary btn-sm" @onclick="createclass">
                                                <i class="bi bi-save"></i> Lưu
                                            </button>
                                        }
                                        else
                                        {
                                            <button class="btn btn-secondary" @onclick="CancelCreate">Hủy</button>
                                        }
                                    </td>
                                    <td>
                                        <input type="text" class="form-control"
                                        @bind="classcreateandupdate.Name"
                                        @oninput="OnInputChangeds"
                                        placeholder="Nhập tên lớp" />
                                    </td>
                                    <td>
                                        <select class="form-select" @bind="classcreateandupdate.TeacherId">
                                            <option value="0">chọn giáo viên</option>
                                            @foreach (var teacher in teacherDTOs)
                                            {
                                                <option value="@teacher.Id">@teacher.Name</option>
                                            }
                                        </select>
                                    </td>
                                </tr>
                            }

                            @foreach (var classItem in classes.Where(c => c.GradeId == item.Id).OrderBy(c => c.Name))
                            {
                                if (EditClass == classItem.Id)
                                {
                                    <tr>
                                        <td>
                                            @if (!string.IsNullOrWhiteSpace(classcreateandupdate.Name))
                                            {
                                                <button class="btn btn-primary btn-sm" @onclick="createclass">
                                                    <i class="bi bi-save"></i> Lưu
                                                </button>
                                            }
                                            else
                                            {
                                                <button class="btn btn-secondary" @onclick="CancelCreate">Hủy</button>
                                            }
                                        </td>
                                        <td>
                                            <input type="text" class="form-control"
                                            @bind="classcreateandupdate.Name"
                                            @bind:event="oninput" name="name" />
                                        </td>
                                        <td>
                                            <select class="form-select" @bind:event="oninput"  @bind="classcreateandupdate.TeacherId">
                                                <option value="">Chọn giáo viên</option>
                                                @foreach (var teacher in teacherDTOs)
                                                {
                                                    <option value="@teacher.Id">@teacher.Name</option>
                                                }
                                            </select>



                                        </td>
                                    </tr>
                                }
                                else
                                {
                                    <tr>
                                        <td style="padding-left: 70px;">
                                            <input type="checkbox"
                                            checked="@(selectidclass == classItem.Id)"
                                            @onchange="() => selectidclas(classItem.Id)"
                                            title="Chọn tài khoản này" />
                                        </td>
                                        <td style="padding-left: 20px;" class="text-primary" @onclick="()=>ToggleTreestudent(classItem.Id)">
                                            <div class="d-flex justify-content-between">
                                                <div type="button">
                                                    <span style="cursor: pointer;">
                                                        └ @classItem.Name
                                                    </span>
                                                </div>
                                            </div>
                                        </td>
                                        <td>
                                        </td>
                                    </tr>
                                }

                                @if (Expandedstudent.Contains(classItem.Id))
                                {
                                    <tr>
                                        <td colspan="6">
                                            <div style="max-height: 300px; overflow-y: auto; margin-left: 100px; border: 1px solid #ddd; border-radius: 5px;">
                                                <table class="table table-hover table-sm">
                                                    <thead class="table-light" style="position: sticky; top: 0; z-index: 1;">
                                                        <tr>
                                                            <th style="width: 5%; text-align: center;">STT</th>
                                                            <th style="width: 15%; text-align: center;">Hình ảnh</th>
                                                            <th style="width: 25%;">Tên học sinh</th>
                                                            <th style="width: 20%;">Ngày sinh</th>
                                                            <th style="width: 20%;">Số điện thoại</th>
                                                            <th style="width: 15%; text-align: center;">Hành động</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        @foreach (var itemUser in users.Where(u => u.idclass == classItem.Id))
                                                        {
                                                            <tr>
                                                                <td style="text-align: center; vertical-align: middle;">@(users.IndexOf(itemUser) + 1)</td>
                                                                <td style="text-align: center; vertical-align: middle;">
                                                                    <img src="@itemUser.picture" alt="Hình ảnh" style="width: 50px; height: 50px; border-radius: 50%; object-fit: cover;" />
                                                                </td>
                                                                <td style="vertical-align: middle;">
                                                                    <span class="text-primary">@itemUser.Name</span>
                                                                </td>
                                                                <td style="vertical-align: middle;">@itemUser.dateofbirt.ToString("dd/MM/yyyy")</td>
                                                                <td style="vertical-align: middle;">@itemUser.PhoneNumber</td>
                                                                <td style="text-align: center; vertical-align: middle;">
                                                                    <button class="btn btn-outline-danger btn-sm mx-1" @onclick="() => DeleteStudent(itemUser.Id)" title="Xóa">
                                                                        <i class="bi bi-person-x-fill"></i>
                                                                    </button>
                                                                    <button class="btn btn-outline-info btn-sm mx-1" @onclick="()=>showmodaal(ModalType.Detail, itemUser.Id)" title="Xem chi tiết">
                                                                        <i class="bi bi-card-list"></i>
                                                                    </button>
                                                                </td>
                                                            </tr>
                                                        }
                                                    </tbody>
                                                </table>
                                            </div>
                                        </td>
                                    </tr>
                                }

                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="3" class="text-center text-danger">Không có lớp nào.</td>
                            </tr>
                            @if (iscreatclass)
                            {
                                <tr>
                                    <td>
                                        @if (!string.IsNullOrWhiteSpace(classcreateandupdate.Name))
                                        {
                                            <button class="btn btn-primary btn-sm" @onclick="createclass">
                                                <i class="bi bi-save"></i> Lưu
                                            </button>
                                        }
                                        else
                                        {
                                            <button class="btn btn-secondary" @onclick="CancelCreate">Hủy</button>
                                        }
                                    </td>
                                    <td>
                                        <input type="text" class="form-control"
                                        @bind="classcreateandupdate.Name"
                                        @oninput="OnInputChangeds"
                                        placeholder="Nhập tên lớp" />
                                    </td>
                                    <td>
                                        <select class="form-select" @bind="classcreateandupdate.TeacherId">
                                            <option value="0">chọn giáo viên</option>
                                            @foreach (var teacher in teacherDTOs)
                                            {
                                                <option value="@teacher.Id">@teacher.Name</option>
                                            }
                                        </select>
                                    </td>
                                </tr>
                            }
                        }
                    }
                }
            }
            else
            {
                <tr>
                    <td colspan="3" class="text-center text-danger">Không có dữ liệu.</td>
                </tr>
            }
        </tbody>
    </table>
</div>
@if (ShowModal)
{
    <div class="modal show d-block" style="background-color: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        @switch (CurrentModalType)
                        {
                            case ModalType.Add:
                                <text>Thêm Tài Khoản</text>
                                ;
                                break;
                            case ModalType.Edit:
                                <text>Chỉnh Sửa Tài Khoản</text>
                                ;
                                break;
                            case ModalType.Detail:
                                <text>Chi Tiết Tài Khoản</text>
                                ;
                                break;
                        }
                    </h5>
                    <button type="button" class="btn-close" @onclick="CloseModal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form>
                        <div class="row g-3">
                            <!-- Họ và Tên -->
                            <div class="col-md-6">
                                <label class="form-label">Họ và Tên</label>
                                <input type="text" class="form-control" placeholder="Nhập họ và tên" @bind="user.FullName"
                                disabled="@(CurrentModalType == ModalType.Detail)" />
                            </div>
                            <!-- Email -->
                            <div class="col-md-6">
                                <label class="form-label">Email</label>
                                <input type="email" class="form-control" placeholder="Nhập email" @bind="user.Email"
                                disabled="@(CurrentModalType == ModalType.Detail)" />
                            </div>
                            <!-- Số điện thoại -->
                            <div class="col-md-6">
                                <label class="form-label">Số điện thoại</label>
                                <input type="text" class="form-control" placeholder="Nhập số điện thoại" @bind="user.PhoneNumber"
                                disabled="@(CurrentModalType == ModalType.Detail)" />
                            </div>
                            <!-- Tên Đăng Nhập -->
                            <div class="col-md-6">
                                <label class="form-label">Tên Đăng Nhập</label>
                                <input type="text" class="form-control" placeholder="Nhập tên đăng nhập" @bind="user.UserName"
                                disabled="@(CurrentModalType == ModalType.Detail)" />
                            </div>
                            <!-- Mật Khẩu (Chỉ khi thêm hoặc sửa) -->

                            <div class="col-md-6">
                                <label class="form-label">Mật Khẩu</label>
                                <input type="password" class="form-control" placeholder="Nhập mật khẩu" @bind="user.PasswordHash"
                                disabled="@(CurrentModalType == ModalType.Detail)" />
                            </div>

                            <!-- Ngày Sinh -->
                            <div class="col-md-6">
                                <label class="form-label">Ngày Sinh</label>
                                <input type="date" class="form-control" @bind="user.DateOfBirth"
                                disabled="@(CurrentModalType == ModalType.Detail)" />
                            </div>
                            <!-- Hình Ảnh -->
                            <div class="col-md-6">
                                <label class="form-label">Hình Ảnh</label>
                                <div class="d-flex align-items-center">
                                    <div class="me-2">
                                        @if (CurrentModalType != ModalType.Detail)
                                        {

                                            <InputFile id="selectfile" style="display:none" class="form-control" onchange="HandfileAvatarTeacher" />
                                            <button class="btn btn-outline-primary" type="button" @onclick="TriggerFileInput">Chọn Ảnh</button>
                                        }
                                    </div>
                                    <div class="position-relative">
                                        @if (string.IsNullOrEmpty(user.Avartar))
                                        {
                                            <i class="bi bi-camera" style="font-size: 80px; color: #ccc; border: 2px solid #ccc; padding: 5px; border-radius: 50%;"></i>
                                        }
                                        else
                                        {
                                            <img src="@user.Avartar" alt="Avatar" class="img-fluid rounded-circle" style="width: 80px; height: 80px; object-fit: cover; border: 2px solid #ccc; padding: 2px;" />
                                        }
                                    </div>
                                </div>
                            </div>
                            <!-- Trạng Thái -->
                            <div class="col-md-6">
                                <label class="form-label">Trạng Thái</label>
                                <select class="form-select" @bind="user.Status" disabled="@(CurrentModalType == ModalType.Detail)">
                                    <option value="1">Hoạt động</option>
                                    <option value="0">Tạm dừng</option>
                                </select>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    @if (CurrentModalType == ModalType.Edit)
                    {
                        <button class="btn btn-primary" @onclick="updatestudent">Lưu</button>
                    }else if(CurrentModalType==ModalType.Detail){
                        <button class="btn btn-warning" @onclick="()=>showmodaal(ModalType.Edit,user.Id)">Chỉnh sửa</button>
                    }else{
                        <button type="button" class="btn btn-outline-primary" @onclick="showexcel">
                            <i class="bi bi-file-earmark-excel"></i> Thêm từ file Excel
                        </button>

                        <!-- Nút tải file mẫu Excel -->
                        <button type="button" class="btn btn-outline-success" @onclick="dowloadexcel">
                            <i class="bi bi-download"></i> Tải file mẫu
                        </button>
                        <button class="btn btn-primary" @onclick="SaveOrder">Lưu</button>
                    }
                </div>
            </div>
        </div>
    </div>
}
<div class="modal fade @(isExcelModalVisible ? "show" : "")" tabindex="-1" style="display:@(isExcelModalVisible ? "block" : "none"); background-color: rgba(0,0,0,0.5);">
    <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content">
            <!-- Tiêu đề -->
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title @* @(selectedClassId=Guid.Empty)? *@">Nhập dữ liệu học sinh</h5>
                <button type="button" class="btn-close" aria-label="Close" @onclick="CloseModal" ></button>
            </div>
            <!-- Nội dung -->
            <div class="modal-body">
                <div class="mb-3">
                    <div class="mb-3 text-center">
                        <!-- Nhãn tải lên tệp -->
                        <label for="fileInput" class="btn btn-outline-primary" style="cursor: pointer;">
                            <i class="bi bi-upload"></i> Chọn file Excel
                        </label>
                        <!-- Input file -->
                        <InputFile OnChange="HandleFileSelected" id="fileInput" class="form-control d-none" oninput="fileNameDisplay.value = fileInput.value" />
                        <!-- Hiển thị tên file -->
                        <input type="text" id="fileNameDisplay" class="form-control mt-2 text-muted text-center" placeholder="File chưa được chọn" readonly />
                    </div>
                </div>
                <div class="text-center">
                    <button type="button" class="btn btn-primary me-2" @onclick="UploadFile">Lưu</button>
                </div>
            </div>
        </div>
    </div>
</div>
@code {
    private bool iscreatclass = false;
    private Guid newGradeName = Guid.Empty;
    private Grades gradescreate = new Grades();
    private Guid selectidclass;
    private Guid selectIdStudent;
    private Guid? EditClass = null;
    private string seachestudent = string.Empty;
    private string? teacherid;
    private Classes classcreateandupdate = new Classes();
    private List<GetallStudentDT0> getallStudentDT0s = new List<GetallStudentDT0>();
    private List<GetallStudentDT0> users =>
      string.IsNullOrEmpty(seachestudent)
          ? getallStudentDT0s
          : getallStudentDT0s.Where(seacher =>
              seacher.Name.Contains(seachestudent, StringComparison.OrdinalIgnoreCase)).ToList();
    private IBrowserFile avatarFile;
    private bool ShowModal { get; set; } = false;
    private ModalType CurrentModalType { get; set; } = ModalType.Add;
    private Users user = new Users();
    private List<TeacherDTO> teacherDTOs = new List<TeacherDTO>();
    private void OnInputChangeds(ChangeEventArgs e)
    {
        var inputValue = e.Value?.ToString(); // Lấy giá trị từ input dưới dạng string

        classcreateandupdate.Name = inputValue;

        // Kiểm tra và chuyển đổi e.Value sang Guid nếu cần thiết
        if (Guid.TryParse(inputValue, out Guid teacherId))
        {
            classcreateandupdate.TeacherId = teacherId; // Gán Guid hợp lệ
        }
        else
        {
            classcreateandupdate.TeacherId = Guid.Empty; // Xử lý nếu không thể chuyển đổi
        }

        StateHasChanged(); // Cập nhật trạng thái giao diện
    }

    private bool isExcelModalVisible = false;
    private void showexcel()
    {
        ShowModal = false;
        isExcelModalVisible = true;

    }
    private  async Task showmodaal(ModalType modalType, Guid id)
    {
        CurrentModalType = modalType; // Cập nhật kiểu modal

        if (CurrentModalType == ModalType.Detail)  // Kiểm tra nếu modal là Detail
        {
            await detail(id);
            ShowModal = true; 

        }
        else
        {

            ShowModal = true;  
        }
    }


    private void selectidclas(Guid id){
        selectidclass = selectidclass == id ? Guid.Empty : id;
    }

    private void ShowCreateForm(ModalType modalType)
    {
        CurrentModalType = modalType;
        if (selectidclass!=Guid.Empty)
        {
            ShowModal = true; // Hiển thị modal
        }else{
            iscreatclass = true;
        }
    }

    private void CancelCreate()
    {

        iscreatclass = false;
        iscreatclass = false;
        EditClass = null;
        selectidclass = Guid.Empty;
    }
    private async Task TriggerFileInput()
    {
        // Tìm và kích hoạt phần tử InputFile ẩn
        await jsruntime.InvokeVoidAsync("eval", "document.getElementById('selectfile').click()");
    }
    private const long MaxFileSize = 10 * 1024 * 1024;
    private async void HandfileAvatarTeacher(InputFileChangeEventArgs e)
    {
        avatarFile = e.File;
        var file = e.File;
        if (file == null || file.Size > MaxFileSize)
        {
            Console.WriteLine("Invalid file or file size exceeds the allowed limit.");
            return;
        }

        // Kiểm tra loại file có hợp lệ không
        var allowedTypes = new[] { "image/png", "image/jpeg", "image/jpg" };
        if (!allowedTypes.Contains(file.ContentType))
        {
            Console.WriteLine("Invalid file type.");
            return;
        }

        // Cập nhật tên file vào userDTOs
        user.Avartar = file.Name;

        try
        {
            // Đọc stream của file
            using var stream = file.OpenReadStream(MaxFileSize);
            using var memoryStream = new MemoryStream();
            await stream.CopyToAsync(memoryStream);
            user.Avartar = $"data:{file.ContentType};base64,{Convert.ToBase64String(memoryStream.ToArray())}";

            Console.WriteLine("Image uploaded successfully.");

            // Gọi StateHasChanged để cập nhật giao diện sau khi file đã được xử lý
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error uploading file: {ex.Message}");
        }
    }

    private IBrowserFile selectedFile;
    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.GetMultipleFiles(1); // Lấy tệp đầu tiên
        if (file.Count > 0)
        {
            selectedFile = file[0]; // Chọn tệp đầu tiên
        }
    }
    private async Task dowloadexcel()
    {
        var respon = await client.GetAsync("https://localhost:7046/api/User/export-sample");
        if (respon.IsSuccessStatusCode)
        {
            var content = await respon.Content.ReadAsByteArrayAsync();
            var base64String = Convert.ToBase64String(content);
            await jsruntime.InvokeVoidAsync("downloadFile", $"Template_Sample_{DateTime.Now:yyyyMMddHHmmss}.xlsx", base64String);
        }
    }
    private async Task UploadFile()
    {
        if (selectedFile != null)
        {
            var stream = selectedFile.OpenReadStream(100 * 1024 * 1024); // Giới hạn 100MB
            var content = new MultipartFormDataContent();

            using (var memoryStream = new MemoryStream())
            {
                await stream.CopyToAsync(memoryStream);
                var fileBytes = memoryStream.ToArray();
                content.Add(new ByteArrayContent(fileBytes), "file", selectedFile.Name);
            }

            if (selectidclass != Guid.Empty)
            {
                content.Add(new StringContent(selectidclass.ToString()), "selectidclass");
            }
            else
            {
                await jsruntime.InvokeVoidAsync("alert", "thiếu id lớp học");

            }
            var response = await client.PostAsync($"https://localhost:7046/api/User/import-excel?id={selectidclass}", content);
            if (response.IsSuccessStatusCode)
            {
                await jsruntime.InvokeVoidAsync("alert", "Tải file thành công");
                await getallstudent(selectidclass);
            }
            else
            {
                await jsruntime.InvokeVoidAsync("Swal.fire", new
                {
                    title = "Thất bại!",
                    text = "Đã xảy ra lỗi khi tải lên",
                    icon = "error",
                    confirmButtonText = "OK"
                });
            }
        }
        else
        {
            await jsruntime.InvokeVoidAsync("Swal.fire", new
            {
                title = "Thất bại!",
                text = "Vui lòng chọn một file",
                icon = "error",
                confirmButtonText = "OK"
            });
        }
    }
    private async Task SaveOrder()
    {
        user.IsLocked = true;
        var content = new MultipartFormDataContent();
        content.Add(new StringContent(user.FullName), "FullName");
        content.Add(new StringContent(user.Email), "Email");
        content.Add(new StringContent(user.UserName), "UserName");
        content.Add(new StringContent(user.PasswordHash), "PasswordHash");
        content.Add(new StringContent(user.PhoneNumber), "PhoneNumber");
        content.Add(new StringContent(user.IsLocked.ToString()), "IsLocked");
        content.Add(new StringContent(user.RoleId.ToString()), "RoleId");
        content.Add(new StringContent(user.Status.ToString()), "status");
        content.Add(new StringContent(user.DateOfBirth.ToString()), "dateOfBirth");

        // Thêm file avatar vào content
        if (avatarFile != null)
        {
            var maxFileSize = 1 * 1024 * 1024;
            var stream = avatarFile.OpenReadStream(maxFileSize); // Giới hạn kích thước file 1MB
            var fileContent = new StreamContent(stream);
            fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(avatarFile.ContentType);
            content.Add(fileContent, "avatarFile", avatarFile.Name);
        }

        // Gửi request đến API
        var response = await client.PostAsync($"https://localhost:7046/api/User/create-user?id={selectidclass}", content);
        if (response.IsSuccessStatusCode)
        {

            selectidclass = Guid.Empty;
            user = new Users();
            await getallstudent(selectidclass);
        }
        else
        {
            await jsruntime.InvokeVoidAsync("alert",$"{selectidclass}");
        }


        CloseModal();
    }
    private async Task updatestudent(){
        var content = new MultipartFormDataContent();

        if (avatarFile != null)
        {
            var maxsizeavarta = 1 * 1024 * 1024;
            try
            {
                var stream = avatarFile.OpenReadStream(maxsizeavarta);
                var filecontent = new StreamContent(stream);
                filecontent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(avatarFile.ContentType);
                content.Add(filecontent, "avatarTeacher", avatarFile.Name);
            }
            catch (Exception ex)
            {
                await jsruntime.InvokeVoidAsync("alert", $"Lỗi xử lý ảnh: {ex.Message}");
                return;
            }
        }

        content.Add(new StringContent(user.Id.ToString()), "Id");
        content.Add(new StringContent(user.FullName ?? ""), "FullName");
        content.Add(new StringContent(user.Email ?? ""), "Email");
        content.Add(new StringContent(user.UserName ?? ""), "UserName");
        content.Add(new StringContent(user.DateOfBirth?.ToString("yyyy-MM-dd") ?? ""), "DateOfBirth");
        content.Add(new StringContent(user.Status.ToString()), "Status");
        content.Add(new StringContent(user.PhoneNumber ?? ""), "PhoneNumber");
        content.Add(new StringContent(user.PasswordHash ?? ""), "PasswordHash");
        content.Add(new StringContent(user.IsLocked.ToString()), "IsLocked");
        content.Add(new StringContent(user.RoleId.ToString()), "RoleId");
        content.Add(new StringContent(user.Avartar.ToString()), "Avartar");


        var respon = await client.PutAsync($"https://localhost:7046/api/User/update-user-teacher/", content);
        if (respon.IsSuccessStatusCode)
        {
            await getallstudent(selectidclass);

        }
        else
        {
            var errorResponse = await respon.Content.ReadAsStringAsync();
            await jsruntime.InvokeVoidAsync("alert", $"Cập nhật tài khoản không thành công: {errorResponse}");
        }
        CloseModal();
    }


    private void CloseModal()
    {
        ShowModal = false;
        user=new Users();
        isExcelModalVisible = false;
    }
    private async Task DeleteStudent(Guid id)
    {

        var response = await client.DeleteAsync($"https://localhost:7046/api/User/delete-user?id={id}");
        if (response.IsSuccessStatusCode)
        {
            await getallstudent(selectidclass);
            await jsruntime.InvokeVoidAsync("alert", "Xóa thành công!");
        }
        else
        {
            await jsruntime.InvokeVoidAsync("alert", "Lỗi khi xóa người dùng!");
        }

    }
    private async Task detail(Guid id){
        user = await client.GetFromJsonAsync<Users>($"https://localhost:7046/api/User/get-by-id-user?id={id}");
    }
    private async void updatestudnet(Guid id){
        user = await client.GetFromJsonAsync<Users>($"https://localhost:7046/api/User/get-by-id-user?id={id}");
    }
    private async Task getallstudent(Guid id)
    {
        getallStudentDT0s = await client.GetFromJsonAsync<List<GetallStudentDT0>>($"https://localhost:7046/api/Student/get-all-ID-class?id={id}");

    }
    private async Task loadidGrade(){
        if(selectidclass!=Guid.Empty){
            classcreateandupdate = await client.GetFromJsonAsync<Classes>($"https://localhost:7046/api/Classes/get-by-id-class?Id={selectidclass}");
            EditClass = selectidclass;
        }
        else{
            await jsruntime.InvokeVoidAsync("alert", "Bạn chưa chọn khối hoặc lớp để chỉnh sửa");

        }
    }
    private async Task createclass(){
        if(selectidclass==Guid.Empty){
            classcreateandupdate.GradeId = idgrade;
            var respon = await client.PostAsJsonAsync("https://localhost:7046/api/Classes/create-class", classcreateandupdate);
            if (respon.IsSuccessStatusCode)
            {
                iscreatclass = false;
                idgrade = Guid.Empty;
                await GetAllClass();

            }
            else { await jsruntime.InvokeVoidAsync("alert", "Thêm Lớp thất bại"); }
        }else{
            classcreateandupdate.Id = selectidclass;
            var respon = await client.PutAsJsonAsync("https://localhost:7046/api/Classes/update-class", classcreateandupdate);
            if(respon.IsSuccessStatusCode){
                iscreatclass = false;
                EditClass = null;
                selectidclass = Guid.Empty;
                await GetAllClass();
            }else{
                await jsruntime.InvokeVoidAsync("alert", "Sửa lớp thất bại");
            }
        }

    }
    private async Task deletegrade()
    {

        if (selectidclass != Guid.Empty) // Kiểm tra nếu selectidclass không phải là Guid.Empty
        {
            var response = await client.DeleteAsync($"https://localhost:7046/api/Classes/delete-class?Id={selectidclass}");
            if (response.IsSuccessStatusCode)
            {
                await GetAllClass();
                await jsruntime.InvokeVoidAsync("alert", "Xóa lớp thành công.");
            }
            else
            {
                await jsruntime.InvokeVoidAsync("alert", "Xóa lớp thất bại.");
            }
        }
        else
        {
            await jsruntime.InvokeVoidAsync("alert", "Không có khối hoặc lớp được chọn để xóa.");
        }
    }

    private List<Grades> grades = new List<Grades>();
    private List<Classes> classes = new List<Classes>();
    private List<Grades> FilteredOrders => string.IsNullOrEmpty(SearchText)
     ? grades 
     : grades.Where(o => o.Name.ToString().Contains(SearchText)) 
              .ToList();
    protected override async Task OnInitializedAsync()
    {
        await GetAllGrade();
        await GetAllClass();
        await Getallteacher();
    }
    private async Task Getallteacher(){
        teacherDTOs = await client.GetFromJsonAsync<List<TeacherDTO>>("https://localhost:7046/api/Teacher/get-all-teacher");
    }
    private async Task GetAllClass(){
        classes = await client.GetFromJsonAsync<List<Classes>>("https://localhost:7046/api/Classes/get-all");
    }
    private async Task GetAllGrade(){
        grades = await client.GetFromJsonAsync<List<Grades>>("https://localhost:7046/api/Grade/get-grade");
    }
    private List<Guid> ExpandedTasks = new List<Guid>();
    private List<Guid> Expandedstudent = new List<Guid>();
    private string SearchText { get; set; }
    private async Task HideModal()
    {
        await jsruntime.InvokeVoidAsync("HideModal");
    }
    private Guid idgrade;
    private async void ToggleTreestudent(Guid id)
    {
        if (Expandedstudent.Contains(id))
        {
            Expandedstudent.Remove(id);
        }
        else
        {
            Expandedstudent.Clear();
            Expandedstudent.Add(id);
            await getallstudent(id);

        }
        StateHasChanged();
    }
    private void ToggleTree(Guid id)
    {
        if (ExpandedTasks.Contains(id))
        {
            Expandedstudent.Clear();
            ExpandedTasks.Remove(id); 
        }
        else
        {
            ExpandedTasks.Add(id);
            idgrade = id;
        }
    }
   
 
}
<script>
        function ShowModal() {
        var modal = new bootstrap.Modal(document.getElementById('taskModal'));
        modal.show();
    }

    function HideModal() {
        var modal = new bootstrap.Modal(document.getElementById('taskModal'));
        modal.hide();
    }

</script>
<style>
    .table thead th {
        border-top: none; /* Bỏ viền trên */
        border-bottom: none; /* Bỏ viền dưới */
        /* Giảm độ đậm của chữ */
    }

</style>