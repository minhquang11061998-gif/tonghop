@inherits LayoutComponentBase
@using System.Text.Json
@using DataBase.DTOs
@using Database.DTOs
@using global::Data.DTOs
@inject IJSRuntime jsRuntime
@inject HttpClient httpClient
@inject NavigationManager navigate
@inject HttpClient httpclient

<PageTitle>Trang Chủ</PageTitle>
<main class="container-fluid">
    <nav class="navbar navbar-expand-md navbar-light bg-light sticky-top border-bottom">
        <div class="container-fluid">
            <a class="navbar-brand d-none d-md-block" href="#">
                <img src="img/Rectangle89.png" alt="" style="height:85px;" />
            </a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <div class="d-sm-none d-flex align-items-center">
                    <i class="bi bi-person-circle fs-2 text-primary"></i>
                    @if (tokenResponse != null)
                    {
                        <span class="nav-link fw-bold text-black-50 px-2">@ShortenContent(userName, 50)</span>
                        <NavLink href="#" @onclick="HandleLogout" class="nav-link fw-bold text-black-50">Đăng xuất</NavLink>
                    }
                    else
                    {
                        <NavLink href="#" @onclick="ShowLoginForm" class="nav-link fw-bold text-black-50">Đăng nhập</NavLink>
                    }
                    <div class="position-relative ms-3">
                        <i class="bi bi-bell-fill fs-2 text-primary notification-icon" @onclick="ToggleNotificationList"></i>
                        <span class="top-0 start-100 translate-middle badge rounded-pill bg-danger">
                            @unreadCount
                            <span class="visually-hidden">unread messages</span>
                        </span>

                        @if (showNotifications)
                        {
                            <ul class="notification-list position-absolute list-group bg-white border rounded shadow-sm p-2" style="width: 300px; max-height: 400px; overflow-y: auto; right: 0; top: 50px; z-index: 10;">
                                @if (data != null && data.Any())
                                {
                                    @foreach (var item in data)
                                    {
                                        <li class="list-group-item" style="cursor: pointer;" @onclick="() => HandleNotificationClick(item)">
                                            <div class="fw-bold">
                                                <i class="bi bi-megaphone text-danger"></i> @item.Title
                                            </div>
                                            <p class="text-muted fw-light mb-0">@ShortenContent(item.Content, 50)</p>
                                            <p class="text-muted fs-6 fst-italic mb-0">@item.CreationTime.ToString("dd/MM/yyyy HH:mm")</p>
                                        </li>
                                    }
                                }
                                else
                                {
                                    <li class="list-group-item text-center text-muted">
                                        No new notifications.
                                    </li>
                                }
                            </ul>
                        }
                    </div>
                </div>
                <!-- Menu chính -->
                <ul class="navbar-nav mx-auto">
                    <li class="nav-item">
                        <NavLink class="nav-link fw-bolder text-black-50" href="/">Trang chủ</NavLink>
                    </li>
                    <li class="nav-item dropdown">
                        <a class="nav-link dropdown-toggle fw-bolder text-black-50" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                            Thi online
                        </a>
                        <ul class="dropdown-menu dropdown-menu-start">
                            @if (tokenResponse != null)
                            {
                                <li><NavLink class="dropdown-item" href="online-exam">Vào thi</NavLink></li>
                            }
                            else
                            {
                                <li><NavLink class="dropdown-item" href="#" @onclick="ShowLoginForm">Yêu cầu đăng nhập</NavLink></li>
                            }
                        </ul>
                    </li>
                    <li class="nav-item dropdown">
                        <a class="nav-link dropdown-toggle fw-bolder text-black-50" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                            Bảng điểm
                        </a>
                        <ul class="dropdown-menu dropdown-menu-start">
                            @if (tokenResponse != null)
                            {
                                <li><a class="dropdown-item" href="/score_online">Xem bảng điểm</a></li>
                            }
                            else
                            {
                                <li><a class="dropdown-item" href="#" @onclick="ShowLoginForm">Yêu cầu đăng nhập</a></li>
                            }
                        </ul>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link fw-bolder text-black-50" href="/contact">Liên hệ</a>
                    </li>
                </ul>

                <!-- Thông báo và đăng xuất (chỉ hiển thị trên thiết bị lớn) -->
                <div class="d-flex align-items-center d-sm-none d-md-flex">
                    <i class="bi bi-person-circle fs-2 text-primary"></i>
                    @if (tokenResponse != null)
                    {
                        <span class="nav-link fw-bold text-black-50 p-2">@ShortenContent(userName, 50)</span>
                        <NavLink href="#" @onclick="HandleLogout" class="nav-link fw-bold text-black-50">Đăng xuất</NavLink>
                    }
                    else
                    {
                        <NavLink href="#" @onclick="ShowLoginForm" class="nav-link fw-bold text-black-50">Đăng nhập</NavLink>
                    }
                    <div class="position-relative">
                        <i class="bi bi-bell-fill fs-2 text-primary notification-icon" @onclick="ToggleNotificationList"></i>
                        <span class="top-0 start-100 translate-middle badge rounded-pill bg-danger">
                            @unreadCount
                            <span class="visually-hidden">unread messages</span>
                        </span>

                        @if (showNotifications)
                        {
                            <ul class="notification-list position-absolute list-group bg-white border rounded shadow-sm p-2" style="width: 300px; max-height: 400px; overflow-y: auto; right: 0; top: 50px; z-index: 10;">
                                @if (data != null && data.Any())
                                {
                                    @foreach (var item in data)
                                    {
                                        <li class="list-group-item" style="cursor: pointer;" @onclick="() => HandleNotificationClick(item)">
                                            <div class="fw-bold">
                                                <i class="bi bi-megaphone text-danger"></i> @item.Title
                                            </div>
                                            <p class="text-muted fw-light mb-0">@ShortenContent(item.Content, 50)</p>
                                            <p class="text-muted fs-6 fst-italic mb-0">@item.CreationTime.ToString("dd/MM/yyyy HH:mm")</p>
                                        </li>
                                    }
                                }
                                else
                                {
                                    <li class="list-group-item text-center text-muted">
                                        No new notifications.
                                    </li>
                                }
                            </ul>
                        }
                    </div>
                </div>
            </div>
        </div>
    </nav>

    <!-- Nội dung chính -->
    <article class="flex-column min-vh-100">
        @Body
    </article>

    <!-- Form đăng nhập -->
    @if (isLoginFormVisible)
    {
        <div class="overlay d-flex justify-content-center align-items-center" style="height: 100vh;">
            <div class="login-form border rounded-4 shadow position-relative p-4" style="max-width: 600px; width: 100%; overflow: hidden;">
                <span class="ic btn-secondary position-absolute top-0 end-0 m-2" @onclick="HideLoginForm">
                    <i class="bi bi-x-lg fw-bold fs-3"></i>
                </span>
                <div class="row">
                    <div class="col-12 text-center mb-3">
                        <h2>Đăng Nhập</h2>
                    </div>
                    <div class="col-12 col-md-6 mb-3">
                        <img src="img/Rectangle89.png" alt="Alternate Text" class="img-fluid rounded-3" />
                    </div>
                    <div class="col-12 col-md-6">
                        <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
                            <DataAnnotationsValidator />
                            <ValidationSummary />
                            <div class="mb-3">
                                <label for="username" class="form-label">Tên tài khoản hoặc Email</label>
                                <InputText id="username" @bind-Value="loginModel.Username" class="form-control" required />
                            </div>
                            <div class="mb-3">
                                <label for="password" class="form-label">Mật khẩu</label>
                                <InputText id="password" @bind-Value="loginModel.Password" type="password" class="form-control" required />
                            </div>
                            <div class="d-flex justify-content-center">
                                <button type="submit" class="btn btn-primary w-100" disabled="@isLoading">
                                    @if (isLoading)
                                    {
                                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                    }
                                    Đăng nhập
                                </button>
                            </div>
                            @if (!string.IsNullOrEmpty(errorMessage))
                            {
                                <div class="alert alert-danger mt-3" id="error">@errorMessage</div>
                            }
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    }
</main>

<footer class="container-fluid mt-auto bg-dark-subtle text-light">
    <div class="row py-4 text-center">
        <!-- Logo -->
        <div class="col-12 col-md-4 mb-3 mb-md-0">
            <img class="w-50" src="img/Rectangle89.png" alt="Logo" />
        </div>

        <!-- Contact Information -->
        <div class="col-12 col-md-4">
            <p class="mb-1"><strong>Địa chỉ:</strong> Phường Cam Phú, Thành Phố Cam Ranh, Tỉnh Khánh Hòa</p>
            <p class="mb-1"><strong>Số điện thoại:</strong> 583862626</p>
            <p class="mb-1"><strong>Email:</strong> <a href="mailto:c1cphu.cr@khanhhoa.edu.vn" class="text-light text-decoration-none">c1cphu.cr@khanhhoa.edu.vn</a></p>
            <p class="mb-0"><strong>Website:</strong> <a href="#" class="text-light text-decoration-none">www.khanhhoa.edu.vn</a></p>
        </div>
    </div>
</footer>
@code {
    private List<NotificationDTO> data = new List<NotificationDTO>();
    private int unreadCount = 0;
    private bool isLoginFormVisible = false;
    private bool isLoading = false;
    private LoginModelDTO loginModel = new LoginModelDTO();
    private string errorMessage;
    private string userName;
    private TokenResponse tokenResponse;
    private void ShowLoginForm() => isLoginFormVisible = true;
    private void HideLoginForm() => isLoginFormVisible = false;
    private bool notificationsLoaded = false;
    private bool showNotifications = false;

    protected override async Task OnInitializedAsync()
    {
        LoadPublicNotifications();
    }

    private async Task LoadPublicNotifications()
    {
        // Hàm này tải thông báo chung (type = 0) ngay khi khởi tạo trang
        try
        {
            var response = await httpclient.GetAsync("api/Notification/get-all-notification");
            if (response.IsSuccessStatusCode)
            {
                var responseData = await response.Content.ReadFromJsonAsync<List<NotificationDTO>>();
                data = responseData?.Where(notification => notification.type == 0).ToList() ?? new List<NotificationDTO>();
                unreadCount = data.Count;
                StateHasChanged(); // Đảm bảo giao diện được cập nhật
            }
            else
            {
                Console.WriteLine($"Error loading public notifications: {response.StatusCode} - {response.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception while loading public notifications: {ex.Message}");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var token = await jsRuntime.InvokeAsync<string>("localStorage.getItem", "YourSuperSecretKeyHere");

            if (!string.IsNullOrEmpty(token))
            {
                tokenResponse = new TokenResponse { Token = token };
                var handler = new System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler();
                var jsonToken = handler.ReadToken(token) as System.IdentityModel.Tokens.Jwt.JwtSecurityToken;
                var time = jsonToken?.Claims.FirstOrDefault(temp => temp.Type == "exp");
                if (time != null)
                {
                    var off = DateTimeOffset.FromUnixTimeSeconds(long.Parse(time.Value)).UtcDateTime;
                    if (off < DateTime.UtcNow.AddMinutes(1))
                    {
                        var response = await httpclient.PostAsync("api/User/logout", null);
                        await jsRuntime.InvokeVoidAsync("localStorage.removeItem", "YourSuperSecretKeyHere");
                        tokenResponse = null;
                        userName = null;
                        navigate.NavigateTo("/", forceLoad: true);

                    }
                }
                var role = jsonToken?.Claims.FirstOrDefault(temp => temp.Type == "Id")?.Value;
                if (role == "Student")
                {
                    userName = jsonToken?.Claims.FirstOrDefault(c => c.Type == "nameab")?.Value;
                    var studentIdClaim = jsonToken?.Claims.FirstOrDefault(c => c.Type == "Idstudent")?.Value;
                    if (!string.IsNullOrEmpty(studentIdClaim) && Guid.TryParse(studentIdClaim, out Guid studentIdGuid))
                    {
                        // Gọi API với studentId dưới dạng Guid
                        Console.WriteLine($"Loading student notifications for studentId: {studentIdGuid}");
                        await LoadStudentNotifications(studentIdGuid); // Tải thông báo cho học sinh với type = 1
                    }
                    else
                    {
                        Console.WriteLine("StudentId is missing or invalid in the token, loading public notifications.");
                        await LoadPublicNotifications(); // Tải thông báo chung nếu không tìm thấy studentId hợp lệ
                    }
                    navigate.NavigateTo("/");

                }
                else if (role == "Teacher")
                {
                    userName = jsonToken?.Claims.FirstOrDefault(c => c.Type == "nameab")?.Value;
                    navigate.NavigateTo("/adminIndex");
                }
                StateHasChanged();
            }
        }
    }

    private async Task LoadStudentNotifications(Guid studentId)
    {
        try
        {
            var response = await httpclient.GetAsync($"api/Notification/get-notifications-student?studentId={studentId}");
            if (response.IsSuccessStatusCode)
            {
                var responseData = await response.Content.ReadFromJsonAsync<List<NotificationDTO>>();
                data = responseData?.Where(notification => notification.type == 1).ToList() ?? new List<NotificationDTO>();

                unreadCount = data.Count; // Cập nhật số lượng thông báo chưa đọc
                StateHasChanged(); // Cập nhật giao diện
            }
            else
            {
                Console.WriteLine($"Error: {response.StatusCode} - {response.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception while loading notifications: {ex.Message}");
        }
    }

    private void ToggleNotificationList()
    {
        showNotifications = !showNotifications;
        StateHasChanged();
    }

    private async Task HandleLogin()
    {
        isLoading = true;
        var response = await httpclient.PostAsJsonAsync("api/User/login", loginModel);

        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<TokenResponse>();
            await jsRuntime.InvokeVoidAsync("localStorage.setItem", "YourSuperSecretKeyHere", result.Token);
            navigate.NavigateTo("", forceLoad: true);
            isLoading = false;
            HideLoginForm();
            StateHasChanged();
            navigate.NavigateTo("/");
        }
        else
        {
            errorMessage = "Tên đăng nhập hoặc mật khẩu không chính xác.";
            isLoading = false;
            loginModel.Username = string.Empty;
            loginModel.Password = string.Empty;
            StateHasChanged();
        }
    }

    private async Task HandleLogout()
    {
        var response = await httpclient.PostAsync("api/User/logout", null);

        if (response.IsSuccessStatusCode)
        {
            await jsRuntime.InvokeVoidAsync("localStorage.removeItem", "YourSuperSecretKeyHere");
            tokenResponse = null;
            userName = null;
            await LoadPublicNotifications();
            navigate.NavigateTo("/");
        }
    }
    private void HandleNotificationClick(NotificationDTO item)
    {
        if (unreadCount > 0)
        {
            unreadCount--;
            StateHasChanged();
        }
    }
    private string ShortenContent(string content, int maxLength)
    {
        if (string.IsNullOrEmpty(content))
        {
            return content;
        }
        return content.Length > maxLength ? content.Substring(0, maxLength) + "..." : content;
    }
}

<script>
    function error() {
        document.getElementById("erro").window.alert("mật khẩu sai")
    }
</script>
